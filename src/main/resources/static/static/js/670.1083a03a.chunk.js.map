{"version":3,"file":"static/js/670.1083a03a.chunk.js","mappings":"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","sources":["Menu.jsx","board/ReadContent.js"],"sourcesContent":["import React from 'react';\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport store from \"./member/Store\";\r\nimport {logout} from \"./member/Reducer\";\r\nimport menustyle from \"./css/menu.css\"\r\nfunction Memu() {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const state = store.getState();\r\n    const handleLogout = () => {\r\n        dispatch(logout());\r\n        navigate(\"/main\");\r\n    };\r\n    return(\r\n        <div className=\"menubar\">\r\n            {state.isLoggedIn ? (\r\n                <button className=\"login\" onClick={handleLogout}>로그아웃</button>\r\n            ) : (\r\n                <button className=\"login\" onClick={() => navigate(\"/member/login\")}>로그인</button>\r\n            )}\r\n\r\n            <ul>\r\n                <li onClick={() => navigate(\"/main\")}>홈</li>\r\n                <li onClick={() => navigate(\"/animal\")}>보호 중인 동물</li>\r\n                <li onClick={() => navigate(\"/recommend\")}>반려견 추천</li>\r\n                <li onClick={() => navigate(\"/board/list\")}>게시판</li>\r\n                <li className=\"dropdown\">\r\n                    <span>회원 정보</span>\r\n                    <div className=\"dropdown-content\">\r\n                        <Link to=\"/member/mypage\">정보 확인 및 수정</Link>\r\n                        <Link to=\"/member/mypage/mycart\">찜 목록</Link>\r\n                        <Link to=\"/member/mypage/mycontent\">내가 작성한 글과 댓글</Link>\r\n                        <Link to=\"/member/mypage/imgUpload\">이미지 업로드</Link>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Memu;","/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport './readBoard.css';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null);\r\n    const [editCommentCont, setEditCommentCont] = useState('');\r\n    const [replyId, setReplyId] = useState(null); // 대댓글의 ID\r\n    const [replyContent, setReplyContent] = useState(''); // 대댓글 내용\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n\r\n    const formDate = (dateString) => {\r\n        if (!dateString) return '';\r\n        const [datePart] = dateString.split('T');\r\n        return datePart;\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: 0,\r\n            board_idx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1,\r\n            w_date: new Date().toISOString(),\r\n            u_date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            console.log('댓글 작성 성공:', response.data);\r\n            const newCommentData = { ...cmtData, reply_idx: response.data.reply_idx };\r\n\r\n            setComments(prevComments => [...prevComments, newCommentData]);\r\n\r\n            setNewComment('');\r\n            setReplyId(null);\r\n            setReplyContent('');\r\n        } catch (error) {\r\n            console.error('댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleReply = async () => {\r\n        const parentCmt = comments.find(comment => comment.reply_idx === replyId);\r\n        const cmtData = {\r\n            reply_idx: replyId,\r\n            board_idx: idx,\r\n            content: replyContent,\r\n            reg_name: reg_name,\r\n            step: parentCmt.step + 1,\r\n            depth: parentCmt.depth + 1,\r\n            w_date: new Date().toISOString(),\r\n            u_date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            console.log('대댓글 작성 성공:', response.data);\r\n            const newReplyData = { ...cmtData, reply_idx: response.data.reply_idx };\r\n\r\n            setComments(prevComments => {\r\n                const parentIdx = prevComments.findIndex(comment => comment.reply_idx === replyId);\r\n                const updateComments = [...prevComments];\r\n                const otherComments = updateComments.slice(parentIdx + 1).filter(comment => comment.depth > parentCmt.depth);\r\n                const insertIdx = otherComments.length > 0\r\n                    ? parentIdx + otherComments.length + 1\r\n                    : parentIdx + 1;\r\n                updateComments.splice(insertIdx, 0, newReplyData); // 순서대로 배치\r\n                return updateComments;\r\n            });\r\n\r\n            setReplyId(null);\r\n            setReplyContent('');\r\n        } catch (error) {\r\n            console.error('대댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put(`/board/UpdateReply`, {\r\n                ...comment,\r\n                content: editCommentCont,\r\n                u_date: new Date().toISOString(),\r\n            });\r\n            console.log('댓글 수정 성공:', response.data);\r\n\r\n            setComments(prevComments => prevComments.map(c =>\r\n                c.reply_idx === comment.reply_idx ? { ...c, content: editCommentCont, u_date: new Date().toISOString() } : c\r\n            ));\r\n\r\n            setEditCommentId(null);\r\n            setEditCommentCont('');\r\n        } catch (error) {\r\n            console.error('댓글 수정 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.reply_idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.delete(`/board/DeleteReply?idx=${reply_idx}`);\r\n            console.log('댓글 삭제 성공:', response.data);\r\n            setComments(prevComments => prevComments.filter(comment => comment.reply_idx !== reply_idx));\r\n        } catch (error) {\r\n            console.error('댓글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.delete(`/board/DeleteBoard?idx=${idx}`);\r\n            console.log('게시글 삭제 성공:', response.data);\r\n            navigate('/board/list');\r\n        } catch (error) {\r\n            console.error('게시글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <div className=\"content-container\">\r\n                <div className=\"title\">{board.title}</div>\r\n                <div className=\"meta-info\">\r\n                    작성자: {board.reg_name} | 조회수: {board.hit} | 작성일: {formDate(board.w_date)} | 수정일: {formDate(board.u_date)}\r\n                </div>\r\n                <div className=\"content\">{board.content}</div>\r\n                <div className=\"content\">\r\n                    {board.reg_name === reg_name && (\r\n                        <>\r\n                            <Link to={`/board/list/edit/${idx}`}>\r\n                                <button>수정</button>\r\n                            </Link>\r\n                            <button onClick={handleDelete}>삭제</button>\r\n                        </>\r\n                    )}\r\n                    <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n                </div>\r\n                <h3>댓글</h3>\r\n                <ul className=\"comment-list\">\r\n                    {comments.map(comment => (\r\n                        <li key={comment.reply_idx} className=\"comment-item\">\r\n                            {editCommentId === comment.reply_idx ? (\r\n                                <>\r\n                                    <textarea\r\n                                        value={editCommentCont}\r\n                                        onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                    ></textarea>\r\n                                    <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                    <button onClick={() => {\r\n                                        setEditCommentId(null);\r\n                                        setEditCommentCont('');\r\n                                    }}>취소</button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <div className=\"comment-content\">\r\n                                        {comment.depth > 1 && <span className=\"reply-indent\">↳ </span>}\r\n                                        {comment.content}\r\n                                    </div>\r\n                                    <div className=\"comment-info\">\r\n                                        작성자: {comment.reg_name} | 작성일: {formDate(comment.w_date)}\r\n                                    </div>\r\n                                    {comment.reg_name === reg_name && (\r\n                                        <>\r\n                                            <button onClick={() => {\r\n                                                setEditCommentId(comment.reply_idx);\r\n                                                setEditCommentCont(comment.content);\r\n                                            }}>수정</button>\r\n                                            <button onClick={() => handleDeleteComment(comment.reply_idx)}>삭제</button>\r\n                                        </>\r\n                                    )}\r\n                                    <button onClick={() => setReplyId(comment.reply_idx)}>댓글 달기</button>\r\n\r\n                                    {replyId === comment.reply_idx && (\r\n                                        <div className=\"reply-input\">\r\n                                            <textarea\r\n                                                value={replyContent}\r\n                                                onChange={(e) => setReplyContent(e.target.value)}\r\n                                                placeholder=\"댓글을 작성하세요\"\r\n                                            ></textarea>\r\n                                            <button onClick={handleReply}>댓글 달기</button>\r\n                                            <button onClick={() => {\r\n                                                setReplyId(null);\r\n                                                setReplyContent('');\r\n                                            }}>취소</button>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <div className=\"comment-input\">\r\n                    <textarea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"댓글을 작성하세요\"\r\n                    ></textarea>\r\n                    <button onClick={handleComment}>댓글 작성</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport './readBoard.css';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null);\r\n    const [editCommentCont, setEditCommentCont] = useState('');\r\n    const [replyId, setReplyId] = useState(null); // 대댓글의 ID\r\n    const [replyContent, setReplyContent] = useState(''); // 대댓글 내용\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n\r\n    const formDate = (dateString) => {\r\n        if (!dateString) return '';\r\n        const [datePart] = dateString.split('T');\r\n        return datePart;\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List.sort((a, b) => {\r\n                    if (a.depth !== b.depth) {\r\n                        return a.depth - b.depth; // depth 기준으로 정렬\r\n                    }\r\n                    return a.reply_idx - b.reply_idx; // reply_idx 기준으로 정렬\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: 0,\r\n            board_idx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1,\r\n            w_date: new Date().toISOString(),\r\n            u_date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            console.log('댓글 작성 성공:', response.data);\r\n            const newCommentData = { ...cmtData, reply_idx: response.data.reply_idx };\r\n\r\n            setComments(prevComments => [...prevComments, newCommentData].sort((a, b) => {\r\n                if (a.depth !== b.depth) {\r\n                    return a.depth - b.depth;\r\n                }\r\n                return a.reply_idx - b.reply_idx;\r\n            }));\r\n\r\n            setNewComment('');\r\n            setReplyId(null);\r\n            setReplyContent('');\r\n        } catch (error) {\r\n            console.error('댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleReply = async () => {\r\n        const parentCmt = comments.find(comment => comment.reply_idx === replyId);\r\n        const cmtData = {\r\n            reply_idx: replyId,\r\n            board_idx: idx,\r\n            content: replyContent,\r\n            reg_name: reg_name,\r\n            step: parentCmt.step + 1,\r\n            depth: parentCmt.depth + 1,\r\n            w_date: new Date().toISOString(),\r\n            u_date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            console.log('대댓글 작성 성공:', response.data);\r\n            const newReplyData = { ...cmtData, reply_idx: response.data.reply_idx };\r\n\r\n            setComments(prevComments => [...prevComments, newReplyData].sort((a, b) => {\r\n                if (a.depth !== b.depth) {\r\n                    return a.depth - b.depth;\r\n                }\r\n                return a.reply_idx - b.reply_idx;\r\n            }));\r\n\r\n            setReplyId(null);\r\n            setReplyContent('');\r\n        } catch (error) {\r\n            console.error('대댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put(`/board/UpdateReply`, {\r\n                ...comment,\r\n                content: editCommentCont,\r\n                u_date: new Date().toISOString(),\r\n            });\r\n            console.log('댓글 수정 성공:', response.data);\r\n\r\n            setComments(prevComments => prevComments.map(c =>\r\n                c.reply_idx === comment.reply_idx ? { ...c, content: editCommentCont, u_date: new Date().toISOString() } : c\r\n            ));\r\n\r\n            setEditCommentId(null);\r\n            setEditCommentCont('');\r\n        } catch (error) {\r\n            console.error('댓글 수정 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.reply_idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.delete(`/board/DeleteReply?idx=${reply_idx}`);\r\n            console.log('댓글 삭제 성공:', response.data);\r\n            setComments(prevComments => prevComments.filter(comment => comment.reply_idx !== reply_idx));\r\n        } catch (error) {\r\n            console.error('댓글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.delete(`/board/DeleteBoard?idx=${idx}`);\r\n            console.log('게시글 삭제 성공:', response.data);\r\n            navigate('/board/list');\r\n        } catch (error) {\r\n            console.error('게시글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <div className=\"content-container\">\r\n                <div className=\"title\">{board.title}</div>\r\n                <div className=\"meta-info\">\r\n                    작성자: {board.reg_name} | 조회수: {board.hit} | 작성일: {formDate(board.w_date)} | 수정일: {formDate(board.u_date)}\r\n                </div>\r\n                <div className=\"content\">{board.content}</div>\r\n                <div className=\"content\">\r\n                    {board.reg_name === reg_name && (\r\n                        <>\r\n                            <Link to={`/board/list/edit/${idx}`}>\r\n                                <button>수정</button>\r\n                            </Link>\r\n                            <button onClick={handleDelete}>삭제</button>\r\n                        </>\r\n                    )}\r\n                    <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n                </div>\r\n                <h3>댓글</h3>\r\n                <ul className=\"comment-list\">\r\n                    {comments.map(comment => (\r\n                        <li key={comment.reply_idx} className=\"comment-item\">\r\n                            {editCommentId === comment.reply_idx ? (\r\n                                <>\r\n                                    <textarea\r\n                                        value={editCommentCont}\r\n                                        onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                    ></textarea>\r\n                                    <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                    <button onClick={() => {\r\n                                        setEditCommentId(null);\r\n                                        setEditCommentCont('');\r\n                                    }}>취소</button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <div className=\"comment-content\">\r\n                                        {comment.depth > 1 && <span className=\"reply-indent\">↳ </span>}\r\n                                        {comment.content}\r\n                                    </div>\r\n                                    <div className=\"comment-info\">\r\n                                        작성자: {comment.reg_name} | 작성일: {formDate(comment.w_date)}\r\n                                    </div>\r\n                                    {comment.reg_name === reg_name && (\r\n                                        <>\r\n                                            <button onClick={() => {\r\n                                                setEditCommentId(comment.reply_idx);\r\n                                                setEditCommentCont(comment.content);\r\n                                            }}>수정</button>\r\n                                            <button onClick={() => handleDeleteComment(comment.reply_idx)}>삭제</button>\r\n                                        </>\r\n                                    )}\r\n                                    <button onClick={() => setReplyId(comment.reply_idx)}>댓글 달기</button>\r\n\r\n                                    {replyId === comment.reply_idx && (\r\n                                        <div className=\"reply-input\">\r\n                                            <textarea\r\n                                                value={replyContent}\r\n                                                onChange={(e) => setReplyContent(e.target.value)}\r\n                                                placeholder=\"댓글을 작성하세요\"\r\n                                            ></textarea>\r\n                                            <button onClick={handleReply}>댓글 달기</button>\r\n                                            <button onClick={() => {\r\n                                                setReplyId(null);\r\n                                                setReplyContent('');\r\n                                            }}>취소</button>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <div className=\"comment-input\">\r\n                    <textarea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"댓글을 작성하세요\"\r\n                    ></textarea>\r\n                    <button onClick={handleComment}>댓글 작성</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n"],"names":["navigate","useNavigate","dispatch","useDispatch","state","store","getState","_jsxs","className","children","isLoggedIn","_jsx","onClick","handleLogout","logout","Link","to","idx","useParams","board","setBoard","useState","comments","setComments","newComment","setNewComment","editCommentId","setEditCommentId","editCommentCont","setEditCommentCont","replyId","setReplyId","replyContent","setReplyContent","userData","useSelector","reg_name","mem_id","formDate","dateString","datePart","split","useEffect","axios","get","concat","then","response","data","boardDTO","r_List","sort","a","b","depth","reply_idx","catch","error","console","handleReply","async","parentCmt","find","comment","cmtData","board_idx","content","step","w_date","Date","toISOString","u_date","post","log","newReplyData","prevComments","message","Menu","title","hit","_Fragment","delete","alert","map","value","onChange","e","target","put","c","handleEditComment","filter","handleDeleteComment","placeholder","newCommentData"],"sourceRoot":""}