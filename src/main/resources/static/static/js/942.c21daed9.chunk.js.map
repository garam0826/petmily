{"version":3,"file":"static/js/942.c21daed9.chunk.js","mappings":"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","sources":["member/MyPage.jsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { logout } from './Reducer'; // Assuming the path to your sessionReducer file\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction MyPage() {\r\n    const dispatch = useDispatch();\r\n    const userid = useSelector(state => state.session.userData.mem_id); // Accessing username from Redux store\r\n\r\n    const [memberInfo, setMemberInfo] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [newMemberInfo, setNewMemberInfo] = useState({\r\n        mem_id: '',\r\n        mem_pw: '',\r\n        mem_name: '',\r\n        birth: '',\r\n        phone: '',\r\n        email: ''\r\n    });\r\n    const [updateMessage, setUpdateMessage] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    const navigate = useNavigate();\r\n    const handleLogout = () => {\r\n        dispatch(logout());\r\n        navigate(\"/member/login\");\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        // Update the new member info state based on input changes\r\n        setNewMemberInfo(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n\r\n    // api - 회원 정보 가져오기\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            const response = await axios.get(`/member/mypage/myinfo/${userid}`);\r\n            setMemberInfo(response.data);\r\n            setNewMemberInfo(response.data);\r\n            setError(null);\r\n        } catch (error) {\r\n            setError('사용자 정보를 가져오는 중에 오류가 발생했습니다.');\r\n            setMemberInfo(null);\r\n        }\r\n    };\r\n\r\n    // api - 회원 정보 수정\r\n    const handleUpdateMember = async () => {\r\n        try {\r\n            const response = await axios.put('/member/mypage/myedit', newMemberInfo);\r\n            setUpdateMessage(response.data);\r\n            alert('회원정보 수정 성공!');\r\n            setMemberInfo(newMemberInfo);\r\n        } catch (error) {\r\n            console.error('Error updating member info:', error);\r\n            alert(error);\r\n            setUpdateMessage('회원정보 수정 실패');\r\n        }\r\n    };\r\n\r\n    // api - 회원 탈퇴\r\n    const handleResign = async () => {\r\n        try {\r\n            const response = await axios.post('/member/mypage/resign', { mem_id: userid });\r\n            if (response.status === 200) {\r\n                alert('회원 탈퇴 성공!');\r\n                setMemberInfo(null);\r\n                setNewMemberInfo({\r\n                    mem_id: '',\r\n                    mem_pw: '',\r\n                    mem_name: '',\r\n                    birth: '',\r\n                    phone: '',\r\n                    email: ''\r\n                });\r\n                navigate((\"/main\"));\r\n            } else {\r\n                setMessage('회원 탈퇴에 실패했습니다.');\r\n            }\r\n        } catch (error) {\r\n            setMessage('회원 탈퇴에 실패했습니다.');\r\n        }\r\n    };\r\n\r\n    /*const handleMyBoardComment = async () => {\r\n        try {\r\n            const response = await axios.get(  );\r\n            console.log(response.data);\r\n        } catch (error) {\r\n            console.error('내가 작성한 글과 댓글 불러오기 실패:', error);\r\n        }\r\n    };*/\r\n\r\n    return (\r\n        <div>\r\n            <h2>My Page</h2>\r\n            <p>Welcome, {userid}님!</p>\r\n            <hr/>\r\n            <div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <button type=\"submit\">{userid}님 정보 가져오기</button>\r\n                </form>\r\n                {error && <p>{error}</p>}\r\n\r\n                {memberInfo && (\r\n                    <div>\r\n                        <h2>사용자 정보</h2>\r\n                        <p>ID: {memberInfo.mem_id}</p>\r\n                        <p>PW: {memberInfo.mem_pw}</p>\r\n                        <p>Name: {memberInfo.mem_name}</p>\r\n                        <p>Birth: {memberInfo.birth}</p>\r\n                        <p>Phone: {memberInfo.phone}</p>\r\n                        <p>Email: {memberInfo.email}</p>\r\n\r\n                        <form>\r\n                            <h2>회원 정보 수정</h2>\r\n                            <label>\r\n                                PW:\r\n                                <input type=\"text\" placeholder=\"새 비번\" name=\"mem_pw\" value={newMemberInfo.mem_pw}\r\n                                       onChange={handleInputChange}/>\r\n                            </label>\r\n                            <label>\r\n                                Name:\r\n                                <input type=\"text\" placeholder=\"새 이름\" name=\"mem_name\" value={newMemberInfo.mem_name}\r\n                                       onChange={handleInputChange}/>\r\n                            </label>\r\n                            <label>\r\n                                Birth:\r\n                                <input type=\"text\" placeholder=\"새 생일\" name=\"birth\" value={newMemberInfo.birth}\r\n                                       onChange={handleInputChange}/>\r\n                            </label>\r\n                            <label>\r\n                                Phone:\r\n                                <input type=\"text\" placeholder=\"새 핸드폰 번호\" name=\"phone\" value={newMemberInfo.phone}\r\n                                       onChange={handleInputChange}/>\r\n                            </label>\r\n                            <label>\r\n                                Email:\r\n                                <input type=\"text\" placeholder=\"새 이메일\" name=\"email\" value={newMemberInfo.email}\r\n                                       onChange={handleInputChange}/>\r\n                            </label>\r\n                            <button onClick={handleUpdateMember}>수정</button>\r\n                            {updateMessage && <p>{updateMessage}</p>}\r\n                        </form>\r\n                        <hr/>\r\n                        <form>\r\n                            <h2>회원 탈퇴</h2>\r\n                            <button type=\"button\" onClick={handleResign}>회원 탈퇴</button>\r\n                            {message && <p>{message}</p>}\r\n                            {error && <p>{error}</p>}\r\n                        </form>\r\n                        {/*<form>\r\n                            <button onClick={handleMyBoardComment}>내가 작성한 글과 댓글</button>\r\n                        </form>*/}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <hr/>\r\n            <button onClick={handleLogout}>Logout</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPage;\r\n"],"names":["dispatch","useDispatch","userid","useSelector","state","session","userData","mem_id","memberInfo","setMemberInfo","useState","error","setError","newMemberInfo","setNewMemberInfo","mem_pw","mem_name","birth","phone","email","updateMessage","setUpdateMessage","message","setMessage","navigate","useNavigate","handleInputChange","e","name","value","target","prevState","_jsxs","children","_jsx","onSubmit","async","event","preventDefault","response","axios","get","concat","data","type","placeholder","onChange","onClick","put","alert","console","post","status","handleLogout","logout"],"sourceRoot":""}