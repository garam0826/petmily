{"version":3,"file":"static/js/670.321b9a7d.chunk.js","mappings":"gLAgPA,QA1FA,WACI,MAAMA,GAAWC,EAAAA,EAAAA,OACX,IAAEC,IAAQC,EAAAA,EAAAA,MACTC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,CAAC,IAC7BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IA8C7C,OA5CAK,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAMC,IAAI,sBAADC,OAAuBZ,IAC3Ba,MAAKC,IACFX,EAASW,EAASC,KAAK,IAE1BC,OAAMC,IACHC,QAAQD,MAAM,4CAA6CA,EAAM,IAEzEP,EAAAA,EAAMC,IAAI,yBAADC,OAA0BZ,IAC9Ba,MAAKC,IACFR,EAAYQ,EAASC,KAAK,IAE7BC,OAAMC,IACHC,QAAQD,MAAM,4CAA6CA,EAAM,GACnE,GACP,CAACjB,KA6BAmB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOC,SAAEnB,EAAMqB,SAC9BD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,CAAC,uBACjBnB,EAAMsB,SAAS,0BAAStB,EAAMuB,IAAI,iCAAWvB,EAAMwB,OAAO,iCAAWxB,EAAMyB,WAErFR,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,SAAEnB,EAAM0B,WAChCN,EAAAA,EAAAA,MAAA,OAAKF,UAAU,UAASC,SAAA,EACpBF,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACC,GAAE,oBAAAlB,OAAsBZ,GAAMqB,UAChCF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,oBAEZF,EAAAA,EAAAA,KAAA,UAAQY,QAASA,IAAMjC,EAAS,eAAeuB,SAAC,kBAChDF,EAAAA,EAAAA,KAAA,UAAQY,QAxBHC,gBACXtB,EAAAA,EAAMuB,OAAO,qBAADrB,OAAsBZ,IACnCa,MAAKC,IACFI,QAAQgB,IAAI,gDAAcpB,EAASC,MACnCjB,EAAS,cAAc,IAE1BkB,OAAMC,IACHC,QAAQD,MAAM,gDAAcA,EAAM,GACpC,EAgBoCI,SAAC,qBAEnCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcC,SACvBhB,EAAS8B,KAAIC,IACVd,EAAAA,EAAAA,MAAA,MAAsBF,UAAU,eAAcC,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,SAAEe,EAAQR,WAC1CN,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,CAAC,uBACpBe,EAAQZ,SAAS,iCAAWY,EAAQV,YAHzCU,EAAQpC,UAQzBsB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,YACIkB,MAAO9B,EACP+B,SAAWC,GAAM/B,EAAc+B,EAAEC,OAAOH,OACxCI,YAAa,uDAEjBtB,EAAAA,EAAAA,KAAA,UAAQY,QA1DFC,gBACZtB,EAAAA,EAAMgC,KAAK,oBAAqB,CAClCC,SAAU3C,EACV4B,QAASrB,IAERM,MAAKC,IACFI,QAAQgB,IAAI,0CAAapB,EAASC,MAClCT,GAAYsC,GAAgB,IAAIA,EAAc9B,EAASC,QACvDP,EAAc,GAAG,IAEpBQ,OAAMC,IACHC,QAAQD,MAAM,0CAAaA,EAAM,GACnC,EA8CqCI,SAAC,qCAKpD,C","sources":["board/ReadContent.js"],"sourcesContent":["/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n    useEffect(() => {\r\n        // 게시글 및 댓글 조회 API 호출\r\n        const fetchBoardAndComments = async () => {\r\n            try {\r\n                const [boardResponse, commentsResponse] = await Promise.all([\r\n                    axios.get(`/board/Content?idx=${idx}`),\r\n                    axios.get(`/board/Reply?boardIdx=${idx}`)\r\n                ]);\r\n                setBoard(boardResponse.data);\r\n                setComments(commentsResponse.data);\r\n            } catch (error) {\r\n                console.error(\"There was an error retrieving the board and comments: \", error);\r\n            }\r\n        };\r\n        fetchBoardAndComments();\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, {\r\n                boardIdx: idx,\r\n                content: newComment,\r\n            });\r\n            console.log('댓글 작성 성공:', response.data);\r\n            setComments(prevComments => [...prevComments, response.data]);\r\n            setNewComment('');\r\n        } catch (error) {\r\n            console.error('댓글 작성 실패:', error);\r\n        }\r\n    };\r\n*/\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n    useEffect(() => {\r\n        // 게시글 조회 API 호출\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                setBoard(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n        axios.get(`/board/Reply?boardIdx=${idx}`)\r\n            .then(response => {\r\n                setComments(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        await axios.post(`/board/WriteReply`, {\r\n            boardIdx: idx,\r\n            content: newComment,\r\n        })\r\n            .then(response => {\r\n                console.log('댓글 작성 성공:', response.data);\r\n                setComments(prevComments => [...prevComments, response.data]);\r\n                setNewComment('');\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 작성 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        await axios.delete(`/board/Delete?idx=${idx}`)\r\n            .then(response => {\r\n                console.log('게시글 삭제 성공:', response.data);\r\n                navigate('/board/list');\r\n            })\r\n            .catch(error => {\r\n                console.error('게시글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>{board.title}</h2>\r\n            <div>\r\n                <span>작성자: {board.reg_name}</span>\r\n                <br/>\r\n                <span>조회수: {board.hit}</span>\r\n                <br/>\r\n                <span>작성 시간: {board.w_date}</span>\r\n                <br/>\r\n                <span>수정 시간: {board.u_date}</span>\r\n            </div>\r\n            <div>\r\n                <span>내용: {board.content}</span>\r\n            </div>\r\n            <br/>\r\n            <Link to={`/board/list/edit/${idx}`}>\r\n                <button>수정</button>\r\n            </Link>\r\n            <button onClick={() =>\r\n                navigate(\"/board/list\")}>\r\n                목록\r\n            </button>\r\n            <button onClick={handleDelete}>삭제</button>\r\n            <h3>댓글</h3>\r\n            <ul>\r\n                {comments.map(comment => (\r\n                    <li key={comment.idx}>\r\n                        {comment.content} - 작성자: {comment.reg_name} - 작성 시간: {comment.w_date}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <div>\r\n                <textarea\r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    placeholder={\"댓글을 작성하세요\"}\r\n                ></textarea>\r\n                <button onClick={handleComment}>댓글 작성</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport './readBoard.css'; // CSS 파일을 import\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n    useEffect(() => {\r\n        // 게시글 조회 API 호출\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                setBoard(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n        axios.get(`/board/Reply?boardIdx=${idx}`)\r\n            .then(response => {\r\n                setComments(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        await axios.post(`/board/WriteReply`, {\r\n            boardIdx: idx,\r\n            content: newComment,\r\n        })\r\n            .then(response => {\r\n                console.log('댓글 작성 성공:', response.data);\r\n                setComments(prevComments => [...prevComments, response.data]);\r\n                setNewComment('');\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 작성 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        await axios.delete(`/board/Delete?idx=${idx}`)\r\n            .then(response => {\r\n                console.log('게시글 삭제 성공:', response.data);\r\n                navigate('/board/list');\r\n            })\r\n            .catch(error => {\r\n                console.error('게시글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"content-container\">\r\n                <div className=\"title\">{board.title}</div>\r\n                <div className=\"meta-info\">\r\n                    작성자: {board.reg_name} | 조회수: {board.hit} | 작성 시간: {board.w_date} | 수정 시간: {board.u_date}\r\n                </div>\r\n                <div className=\"content\">{board.content}</div>\r\n                <div className=\"content\">\r\n                    <Link to={`/board/list/edit/${idx}`}>\r\n                        <button>수정</button>\r\n                    </Link>\r\n                    <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n                    <button onClick={handleDelete}>삭제</button>\r\n                </div>\r\n                <h3>댓글</h3>\r\n                <ul className=\"comment-list\">\r\n                    {comments.map(comment => (\r\n                        <li key={comment.idx} className=\"comment-item\">\r\n                            <div className=\"comment-content\">{comment.content}</div>\r\n                            <div className=\"comment-info\">\r\n                                작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <div className=\"comment-input\">\r\n                    <textarea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder={\"댓글을 작성하세요\"}\r\n                    ></textarea>\r\n                    <button onClick={handleComment}>댓글 작성</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n\r\n"],"names":["navigate","useNavigate","idx","useParams","board","setBoard","useState","comments","setComments","newComment","setNewComment","useEffect","axios","get","concat","then","response","data","catch","error","console","_jsx","className","children","_jsxs","title","reg_name","hit","w_date","u_date","content","Link","to","onClick","async","delete","log","map","comment","value","onChange","e","target","placeholder","post","boardIdx","prevComments"],"sourceRoot":""}