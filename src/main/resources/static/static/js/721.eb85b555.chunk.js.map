{"version":3,"file":"static/js/721.eb85b555.chunk.js","mappings":"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","sources":["Menu.jsx","member/Favorite.jsx"],"sourcesContent":["import React from 'react';\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport store from \"./member/Store\";\r\nimport {logout} from \"./member/Reducer\";\r\nimport menustyle from \"./css/menu.css\"\r\nfunction Memu() {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const state = store.getState();\r\n    const handleLogout = () => {\r\n        dispatch(logout());\r\n        navigate(\"/main\");\r\n    };\r\n    return(\r\n        <div className=\"menubar\">\r\n            {state.isLoggedIn ? (\r\n                <button className=\"login\" onClick={handleLogout}>로그아웃</button>\r\n            ) : (\r\n                <button className=\"login\" onClick={() => navigate(\"/member/login\")}>로그인</button>\r\n            )}\r\n\r\n            <ul>\r\n                <li onClick={() => navigate(\"/main\")}>홈</li>\r\n                <li onClick={() => navigate(\"/animal\")}>보호 중인 동물</li>\r\n                <li onClick={() => navigate(\"/recommend\")}>반려견 추천</li>\r\n                <li onClick={() => navigate(\"/board/list\")}>게시판</li>\r\n                <li onClick={() => navigate(\"/\")}>유기견 입양 과정</li>\r\n                <li className=\"dropdown\">\r\n                    <span>회원 정보</span>\r\n                    <div className=\"dropdown-content\">\r\n                        <Link to=\"/member/mypage\">정보 확인 및 수정</Link>\r\n                        <Link to=\"/member/mypage/mycart\">찜 목록</Link>\r\n                        <Link to=\"/member/mypage\">내가 작성한 글과 댓글</Link>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Memu;","/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction Favorite() {\r\n    const userData = useSelector(state => state.userData); // 사용자 데이터를 스토어에서 가져옴.\r\n    const userId = userData.mem_id;\r\n    const [favorites, setFavorites] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            getFavorites(userId); // 사용자 아이디가 있을 때에만 찜 목록을 가져옴.\r\n        }\r\n    }, [userId]);\r\n\r\n    // 찜 목록 불러오기\r\n    const getFavorites = (userId) => {\r\n        axios.get(`/favorites/list?memId=${userId}`)\r\n            .then(response => {\r\n                setFavorites(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching favorites: \", error);\r\n            });\r\n    };\r\n\r\n    // 찜 제거 함수\r\n    const removeFavorite = (desertionNo) => {\r\n        axios.delete(`/favorites/remove?memId=${userId}&desertionNo=${desertionNo}`)\r\n            .then(response => {\r\n                console.log(\"Favorite removed successfully\");\r\n                // 찜 제거 후 찜 목록 다시 불러오기\r\n                getFavorites(userId);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error removing favorite: \", error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <h2>찜 목록</h2>\r\n            <ul>\r\n                {favorites.map(favorite => (\r\n                    <li key={favorite.id}>\r\n                        <span>{favorite.desertionNo}</span>\r\n                        <button onClick={() => removeFavorite(favorite.desertionNo)}>찜 제거</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorite;\r\n*/\r\n/*import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction Favorite() {\r\n    const userData = useSelector(state => state.userData); // 사용자 데이터를 스토어에서 가져옴.\r\n    const userId = userData ? userData.mem_id : '';\r\n    const [favorites, setFavorites] = useState([]);\r\n    const [members, setMembers] = useState([]);\r\n    const [selectedDesertionNo, setSelectedDesertionNo] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            getFavorites(userId); // 사용자 아이디가 있을 때에만 찜 목록을 가져옴.\r\n        }\r\n    }, [userId]);\r\n\r\n    // 찜 목록 불러오기\r\n    const getFavorites = (userId) => {\r\n        axios.get(`/favorites/list?memId=${userId}`)\r\n            .then(response => {\r\n                setFavorites(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching favorites: \", error);\r\n            });\r\n    };\r\n\r\n    // 특정 유기번호에 대한 사용자 목록 불러오기\r\n    const getMembersByDesertionNo = (desertionNo) => {\r\n        axios.get(`/favorites/members/${desertionNo}`)\r\n            .then(response => {\r\n                setMembers(response.data);\r\n                setSelectedDesertionNo(desertionNo);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching members: \", error);\r\n            });\r\n    };\r\n\r\n    // 찜 제거 함수\r\n    const removeFavorite = (desertionNo) => {\r\n        axios.delete(`/favorites/remove?memId=${userId}&desertionNo=${desertionNo}`)\r\n            .then(response => {\r\n                console.log(\"Favorite removed successfully\");\r\n                // 찜 제거 후 찜 목록 다시 불러오기\r\n                getFavorites(userId);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error removing favorite: \", error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <h2>찜 목록</h2>\r\n            <ul>\r\n                {favorites.map(favorite => (\r\n                    <li key={favorite.id}>\r\n                        <span>{favorite.desertionNo}</span>\r\n                        <button onClick={() => removeFavorite(favorite.desertionNo)}>찜 제거</button>\r\n                        <button onClick={() => getMembersByDesertionNo(favorite.desertionNo)}>찜한 사용자 보기</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedDesertionNo && (\r\n                <div>\r\n                    <h3>{selectedDesertionNo}을(를) 찜한 사용자 목록</h3>\r\n                    <ul>\r\n                        {members.map(member => (\r\n                            <li key={member}>{member}</li>\r\n                        ))}1\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorite;\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction Favorite() {\r\n    const userData = useSelector(state => state.userData); // 사용자 데이터를 스토어에서 가져옴.\r\n    const userId = userData ? userData.mem_id : '';\r\n    const [favorites, setFavorites] = useState([]);\r\n    const [members, setMembers] = useState([]);\r\n    const [selectedDesertionNo, setSelectedDesertionNo] = useState('');\r\n    const [selectedUserFavorites, setSelectedUserFavorites] = useState([]);\r\n    const [selectedUserId, setSelectedUserId] = useState('');\r\n    const [userFavorites, setUserFavorites] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            getFavorites(userId); // 사용자 아이디가 있을 때에만 찜 목록을 가져옴.\r\n        }\r\n    }, [userId]);\r\n\r\n    // 찜 목록 불러오기\r\n    const getFavorites = (userId) => {\r\n        axios.get(`/favorites/list?memId=${userId}`)\r\n            .then(response => {\r\n                setFavorites(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching favorites: \", error);\r\n            });\r\n    };\r\n\r\n    // 특정 유기번호에 대한 사용자 목록 불러오기\r\n    const getMembersByDesertionNo = (desertionNo) => {\r\n        axios.get(`/favorites/members/${desertionNo}`)\r\n            .then(response => {\r\n                setMembers(response.data);\r\n                setSelectedDesertionNo(desertionNo);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching members: \", error);\r\n            });\r\n    };\r\n\r\n    // 특정 사용자의 찜 목록 불러오기\r\n    const getUserFavorites = (memId) => {\r\n        axios.get(`/favorites/list?memId=${memId}`)\r\n            .then(response => {\r\n                setSelectedUserFavorites(response.data);\r\n                setSelectedUserId(memId);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching user favorites: \", error);\r\n            });\r\n    };\r\n\r\n    // 찜 제거 함수\r\n    const removeFavorite = (desertionNo) => {\r\n        axios.delete(`/favorites/remove?memId=${userId}&desertionNo=${desertionNo}`)\r\n            .then(response => {\r\n                console.log(\"Favorite removed successfully\");\r\n                // 찜 제거 후 찜 목록 다시 불러오기\r\n                getFavorites(userId);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error removing favorite: \", error);\r\n            });\r\n    };\r\n\r\n    /*return (\r\n        <div>\r\n            <Menu />\r\n            <h2>찜 목록</h2>\r\n            <ul>\r\n                {favorites.map(favorite => (\r\n                    <li key={favorite.id}>\r\n                        <span>{favorite.desertionNo}</span>\r\n                        <button onClick={() => removeFavorite(favorite.desertionNo)}>찜 제거</button>\r\n                        <button onClick={() => getMembersByDesertionNo(favorite.desertionNo)}>찜한 사용자 보기</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedDesertionNo && (\r\n                <div>\r\n                    <h3>{selectedDesertionNo}을(를) 찜한 사용자 목록</h3>\r\n                    <ul>\r\n                        {members.map(member => (\r\n                            <li key={member}>\r\n                                <span>{member}</span>\r\n                                <button onClick={() => getUserFavorites(member)}>이 사용자의 찜 목록 보기</button>\r\n                            </li>\r\n                        ))}\r\n                        {selectedUserId && (\r\n                            <div>\r\n                                <h3>{selectedUserId}의 찜 목록</h3>\r\n                                <ul>\r\n                                    {selectedUserFavorites.map(favorite => (\r\n                                        <li key={favorite.id}>{favorite.desertionNo}</li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n     */\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <h2>찜 목록</h2>\r\n            <ul>\r\n                {favorites.map(favorite => (\r\n                    <li key={favorite.id}>\r\n                        <span>{favorite.desertionNo}</span>\r\n                        <button onClick={() => removeFavorite(favorite.desertionNo)}>찜 제거</button>\r\n                        <button onClick={() => getMembersByDesertionNo(favorite.desertionNo)}>찜한 사용자 보기</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedDesertionNo && (\r\n                <div>\r\n                    <h3>{selectedDesertionNo}을(를) 찜한 사용자 목록</h3>\r\n                    <ul>\r\n                        {members.map(member => (\r\n                            <li key={member}>\r\n                                <div>\r\n                                    <span>{member}</span>\r\n                                    <button onClick={() => getUserFavorites(member)}>\r\n                                        이 사용자의 찜 목록 보기\r\n                                    </button>\r\n                                </div>\r\n                                {userFavorites[member] && userFavorites[member].length > 0 && (\r\n                                    <ul>\r\n                                        {userFavorites[member].map(fav => (\r\n                                            <li key={fav.id}>{fav.desertionNo}</li>\r\n                                        ))}\r\n                                    </ul>\r\n                                )}\r\n                                {userFavorites[member] && userFavorites[member].length === 0 && (\r\n                                    <div>찜 목록이 없습니다.</div>\r\n                                )}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorite;\r\n"],"names":["navigate","useNavigate","dispatch","useDispatch","state","store","getState","_jsxs","className","children","isLoggedIn","_jsx","onClick","handleLogout","logout","Link","to","userData","useSelector","userId","mem_id","favorites","setFavorites","useState","members","setMembers","selectedDesertionNo","setSelectedDesertionNo","selectedUserFavorites","setSelectedUserFavorites","selectedUserId","setSelectedUserId","userFavorites","setUserFavorites","useEffect","getFavorites","axios","get","concat","then","response","data","catch","error","console","Menu","map","favorite","desertionNo","removeFavorite","delete","log","getMembersByDesertionNo","id","member","getUserFavorites","memId","length","fav"],"sourceRoot":""}