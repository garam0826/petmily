{"version":3,"file":"static/js/670.316cf01a.chunk.js","mappings":"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","sources":["board/ReadContent.js"],"sourcesContent":["/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport './readBoard.css';\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const {reply_idx} = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null); //수정 중인 댓글의 id를 저장\r\n    const [editCommentCont, setEditCommentCont] = useState(''); //수정할 댓글의 내용을 저장\r\n    const [replyId, setReplyId] = useState(null); //대댓글 작성 대상 댓글의 id를 저장\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n    const currentTime = new Date().toISOString();\r\n\r\n    useEffect(() => {\r\n        // 게시글 조회 API 호출\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List);\r\n                //setBoard(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: 0,\r\n            boardIdx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1,\r\n            w_date: currentTime,\r\n            u_date: currentTime,\r\n        };\r\n\r\n        if (replyId != null) {\r\n            //대댓글 작성\r\n            const parentCmt = comments.find(comment => comment.idx === replyId);\r\n            cmtData.step = parentCmt.step + 1;\r\n            cmtData.depth = parentCmt.depth + 1;\r\n            cmtData.reply_idx = replyId;\r\n        }\r\n        await axios.post(`/board/WriteReply`, cmtData)\r\n            .then(response => {\r\n                console.log('댓글 작성 성공:', response.data);\r\n                /!*setComments([...comments, response.data]);*!/\r\n                setComments(prevComments => [...prevComments, {...cmtData, reply_idx: response.data.reply_idx}]);\r\n                setNewComment('');\r\n                /!*setReplyId(null);*!/\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 작성 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.put(`/board/UpdateReply`, {\r\n            ...comment,\r\n            content: editCommentCont,\r\n            u_date: currentTime,\r\n        })\r\n            .then(response => {\r\n                console.log('댓글 수정 성공:', response.data);\r\n                setComments(prevComments => prevComments.map(c => c.reply_idx === comment.reply_idx ? { ...c, content: editCommentCont, u_date: currentTime } : c));\r\n                setEditCommentId(null);\r\n                setEditCommentCont('');\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 수정 실패:', error);\r\n            });\r\n    };\r\n\r\n    // 댓글 삭제 함수\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.reply_idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.delete(`/board/DeleteReply?idx=${reply_idx}`)\r\n            .then(response => {\r\n                console.log('댓글 삭제 성공:', response.data);\r\n                setComments(prevComments => prevComments.filter(comment => comment.reply_idx !== reply_idx));\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.delete(`/board/DeleteBoard?idx=${idx}`)\r\n            .then(response => {\r\n                console.log('게시글 삭제 성공:', response.data);\r\n                navigate('/board/list');\r\n            })\r\n            .catch(error => {\r\n                console.error('게시글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-container\">\r\n            <div className=\"title\">{board.title}</div>\r\n            <div className=\"meta-info\">\r\n                작성자: {board.reg_name} | 조회수: {board.hit} | 작성 시간: {board.w_date} | 수정 시간: {board.u_date}\r\n            </div>\r\n            <div className=\"content\">{board.content}</div>\r\n            <div className=\"content\">\r\n                {board.reg_name === reg_name && (\r\n                    <>\r\n                        <Link to={`/board/list/edit/${idx}`}>\r\n                            <button>수정</button>\r\n                        </Link>\r\n                        <button onClick={handleDelete}>삭제</button>\r\n                    </>\r\n                )}\r\n                <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n            </div>\r\n            <h3>댓글</h3>\r\n            <ul className=\"comment-list\">\r\n                {comments.map(comment => (\r\n                    <li key={comment.reply_idx} className=\"comment-item\">\r\n                        {/!*<div className=\"comment-content\">{comment.content}</div>\r\n                            <div className=\"comment-info\">\r\n                                작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                            </div>*!/}\r\n                        {editCommentId === comment.reply_idx ? (\r\n                            <>\r\n                                    <textarea\r\n                                        value={editCommentCont}\r\n                                        onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                    ></textarea>\r\n                                <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                <button onClick={() => {\r\n                                    setEditCommentId(null);\r\n                                    setEditCommentCont('');\r\n                                }}>취소\r\n                                </button>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <div className=\"comment-content\">{comment.content}</div>\r\n                                <div className=\"comment-info\">\r\n                                    작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                                </div>\r\n                                {comment.reg_name === reg_name && (\r\n                                    <>\r\n                                        <button onClick={() => {\r\n                                            setEditCommentId(comment.reply_idx);\r\n                                            {/!*setEditCommentId(comment.idx);*!/}\r\n                                            setEditCommentCont(comment.content);\r\n                                        }}>수정\r\n                                        </button>\r\n                                        <button onClick={() => handleDeleteComment(comment.reply_idx)}>삭제</button>\r\n                                    </>\r\n                                )}\r\n                                <button onClick={() => setReplyId(comment.reply_idx)}>대댓글 달기</button>\r\n                            </>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className=\"comment-input\">\r\n                    <textarea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder={\"댓글을 작성하세요\"}\r\n                    ></textarea>\r\n                {/!*<input type=\"hidden\" name={reply_idx}></input>*!/}\r\n                <input type=\"hidden\" name={replyId}></input>\r\n                <button onClick={handleComment}>댓글 작성</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\nimport './readBoard.css';\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null);\r\n    const [editCommentCont, setEditCommentCont] = useState('');\r\n    const [replyId, setReplyId] = useState(null);\r\n    const [replyFormVisible, setReplyFormVisible] = useState(null);\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n    const currentTime = new Date().toISOString();\r\n\r\n    useEffect(() => {\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: 0,\r\n            boardIdx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1,\r\n            w_date: currentTime,\r\n            u_date: currentTime,\r\n        };\r\n\r\n        if (replyId != null) {\r\n            const parentCmt = comments.find(comment => comment.reply_idx === replyId);\r\n            cmtData.step = parentCmt.step + 1;\r\n            cmtData.depth = parentCmt.depth + 1;\r\n            cmtData.reply_idx = replyId;\r\n        }\r\n\r\n        await axios.post(`/board/WriteReply`, cmtData)\r\n            .then(response => {\r\n                console.log('댓글 작성 성공:', response.data);\r\n                setComments(prevComments => [...prevComments, {...cmtData, reply_idx: response.data.reply_idx}]);\r\n                setNewComment('');\r\n                setReplyFormVisible(null); // 댓글 작성 후 폼 숨기기\r\n                setReplyId(null); // 댓글 작성 후 대상 리셋\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 작성 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.put(`/board/UpdateReply`, {\r\n            ...comment,\r\n            content: editCommentCont,\r\n            u_date: currentTime,\r\n        })\r\n            .then(response => {\r\n                console.log('댓글 수정 성공:', response.data);\r\n                setComments(prevComments => prevComments.map(c => c.reply_idx === comment.reply_idx ? { ...c, content: editCommentCont, u_date: currentTime } : c));\r\n                setEditCommentId(null);\r\n                setEditCommentCont('');\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 수정 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.reply_idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.delete(`/board/DeleteReply?idx=${reply_idx}`)\r\n            .then(response => {\r\n                console.log('댓글 삭제 성공:', response.data);\r\n                setComments(prevComments => prevComments.filter(comment => comment.reply_idx !== reply_idx));\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.delete(`/board/DeleteBoard?idx=${idx}`)\r\n            .then(response => {\r\n                console.log('게시글 삭제 성공:', response.data);\r\n                navigate('/board/list');\r\n            })\r\n            .catch(error => {\r\n                console.error('게시글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-container\">\r\n            <div className=\"title\">{board.title}</div>\r\n            <div className=\"meta-info\">\r\n                작성자: {board.reg_name} | 조회수: {board.hit} | 작성 시간: {board.w_date} | 수정 시간: {board.u_date}\r\n            </div>\r\n            <div className=\"content\">{board.content}</div>\r\n            <div className=\"content\">\r\n                {board.reg_name === reg_name && (\r\n                    <>\r\n                        <Link to={`/board/list/edit/${idx}`}>\r\n                            <button>수정</button>\r\n                        </Link>\r\n                        <button onClick={handleDelete}>삭제</button>\r\n                    </>\r\n                )}\r\n                <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n            </div>\r\n            <h3>댓글</h3>\r\n            <ul className=\"comment-list\">\r\n                {comments.map(comment => (\r\n                    <li key={comment.reply_idx} className=\"comment-item\">\r\n                        <div className=\"comment-content\">{comment.content}</div>\r\n                        <div className=\"comment-info\">\r\n                            작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                        </div>\r\n                        {editCommentId === comment.reply_idx ? (\r\n                            <>\r\n                                <textarea\r\n                                    value={editCommentCont}\r\n                                    onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                ></textarea>\r\n                                <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                <button onClick={() => {\r\n                                    setEditCommentId(null);\r\n                                    setEditCommentCont('');\r\n                                }}>취소</button>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {comment.reg_name === reg_name && (\r\n                                    <>\r\n                                        <button onClick={() => {\r\n                                            setEditCommentId(comment.reply_idx);\r\n                                            setEditCommentCont(comment.content);\r\n                                        }}>수정</button>\r\n                                        <button onClick={() => handleDeleteComment(comment.reply_idx)}>삭제</button>\r\n                                    </>\r\n                                )}\r\n                                <button onClick={() => {\r\n                                    setReplyFormVisible(comment.reply_idx);\r\n                                    setReplyId(comment.reply_idx);\r\n                                }}>대댓글 달기</button>\r\n                            </>\r\n                        )}\r\n                        {replyFormVisible === comment.reply_idx && (\r\n                            <div>\r\n                                <textarea\r\n                                    value={newComment}\r\n                                    onChange={(e) => setNewComment(e.target.value)}\r\n                                    placeholder={\"대댓글을 작성하세요\"}\r\n                                ></textarea>\r\n                                <button onClick={handleComment}>대댓글 작성</button>\r\n                            </div>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className=\"comment-input\">\r\n                <textarea\r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    placeholder={\"댓글을 작성하세요\"}\r\n                ></textarea>\r\n                <button onClick={() => {\r\n                    setReplyId(null);\r\n                    handleComment();\r\n                }}>댓글 작성</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["navigate","useNavigate","idx","useParams","board","setBoard","useState","comments","setComments","newComment","setNewComment","editCommentId","setEditCommentId","editCommentCont","setEditCommentCont","replyId","setReplyId","replyFormVisible","setReplyFormVisible","userData","useSelector","state","reg_name","mem_id","currentTime","Date","toISOString","useEffect","axios","get","concat","then","response","data","boardDTO","r_List","catch","error","console","handleComment","async","cmtData","reply_idx","boardIdx","content","step","depth","w_date","u_date","parentCmt","find","comment","post","log","prevComments","_jsxs","className","children","_jsx","title","hit","_Fragment","Link","to","onClick","delete","alert","map","value","onChange","e","target","put","c","handleEditComment","filter","handleDeleteComment","placeholder"],"sourceRoot":""}