{"version":3,"file":"static/js/570.f7cc5fa4.chunk.js","mappings":"gLAmGA,QA/FA,WACI,MAAMA,GAAWC,EAAAA,EAAAA,OACX,IAAEC,IAAQC,EAAAA,EAAAA,MACTC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,CAAC,IAC7BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IA8C7C,OA5CAK,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAMC,IAAI,sBAADC,OAAuBZ,IAC3Ba,MAAKC,IACFX,EAASW,EAASC,KAAK,IAE1BC,OAAMC,IACHC,QAAQD,MAAM,4CAA6CA,EAAM,IAEzEP,EAAAA,EAAMC,IAAI,yBAADC,OAA0BZ,IAC9Ba,MAAKC,IACFR,EAAYQ,EAASC,KAAK,IAE7BC,OAAMC,IACHC,QAAQD,MAAM,4CAA6CA,EAAM,GACnE,GACP,CAACjB,KA6BAmB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAKlB,EAAMoB,SACXH,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACID,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,uBAAMlB,EAAMqB,aAClBF,EAAAA,EAAAA,KAAA,UACAF,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,uBAAMlB,EAAMsB,QAClBH,EAAAA,EAAAA,KAAA,UACAF,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,8BAAQlB,EAAMuB,WACpBJ,EAAAA,EAAAA,KAAA,UACAF,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,8BAAQlB,EAAMwB,cAExBL,EAAAA,EAAAA,KAAA,OAAAD,UACID,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,iBAAKlB,EAAMyB,cAErBN,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACO,EAAAA,GAAI,CAACC,GAAE,oBAAAjB,OAAsBZ,GAAMoB,UAChCC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAEZC,EAAAA,EAAAA,KAAA,UAAQS,QAASA,IACbhC,EAAS,eAAesB,SAAC,kBAG7BC,EAAAA,EAAAA,KAAA,UAAQS,QAlCKC,gBACXrB,EAAAA,EAAMsB,OAAO,qBAADpB,OAAsBZ,IACnCa,MAAKC,IACFI,QAAQe,IAAI,gDAAcnB,EAASC,MACnCjB,EAAS,cAAc,IAE1BkB,OAAMC,IACHC,QAAQD,MAAM,gDAAcA,EAAM,GACpC,EA0B4BG,SAAC,kBAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJC,EAAAA,EAAAA,KAAA,MAAAD,SACKf,EAAS6B,KAAIC,IACVhB,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACKe,EAAQR,QAAQ,0BAASQ,EAAQZ,SAAS,iCAAWY,EAAQV,SADzDU,EAAQC,SAKzBjB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,YACIgB,MAAO9B,EACP+B,SAAWC,GAAM/B,EAAc+B,EAAEC,OAAOH,OACxCI,YAAa,uDAEjBpB,EAAAA,EAAAA,KAAA,UAAQS,QAhEEC,gBACZrB,EAAAA,EAAMgC,KAAK,oBAAqB,CAClCC,SAAU3C,EACV2B,QAASpB,IAERM,MAAKC,IACFI,QAAQe,IAAI,0CAAanB,EAASC,MAClCT,GAAYsC,GAAgB,IAAIA,EAAc9B,EAASC,QACvDP,EAAc,GAAG,IAEpBQ,OAAMC,IACHC,QAAQD,MAAM,0CAAaA,EAAM,GACnC,EAoDiCG,SAAC,mCAIhD,C","sources":["board/ReadContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n    useEffect(() => {\r\n        // 게시글 조회 API 호출\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                setBoard(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n        axios.get(`/board/Reply?boardIdx=${idx}`)\r\n            .then(response => {\r\n                setComments(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        await axios.post(`/board/WriteReply`, {\r\n            boardIdx: idx,\r\n            content: newComment,\r\n        })\r\n            .then(response => {\r\n                console.log('댓글 작성 성공:', response.data);\r\n                setComments(prevComments => [...prevComments, response.data]);\r\n                setNewComment('');\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 작성 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        await axios.delete(`/board/Delete?idx=${idx}`)\r\n            .then(response => {\r\n                console.log('게시글 삭제 성공:', response.data);\r\n                navigate('/board/list');\r\n            })\r\n            .catch(error => {\r\n                console.error('게시글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>{board.title}</h2>\r\n            <div>\r\n                <span>작성자: {board.reg_name}</span>\r\n                <br />\r\n                <span>조회수: {board.hit}</span>\r\n                <br />\r\n                <span>작성 시간: {board.w_date}</span>\r\n                <br />\r\n                <span>수정 시간: {board.u_date}</span>\r\n            </div>\r\n            <div>\r\n                <span>내용: {board.content}</span>\r\n            </div>\r\n            <br />\r\n            <Link to={`/board/list/edit/${idx}`}>\r\n                <button>수정</button>\r\n            </Link>\r\n            <button onClick={() =>\r\n                navigate(\"/board/list\")}>\r\n                목록\r\n            </button>\r\n            <button onClick={handleDelete}>삭제</button>\r\n            <h3>댓글</h3>\r\n            <ul>\r\n                {comments.map(comment => (\r\n                    <li key={comment.id}>\r\n                        {comment.content} - 작성자: {comment.reg_name} - 작성 시간: {comment.w_date}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div>\r\n                <textarea\r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    placeholder={\"댓글을 작성하세요\"}\r\n                ></textarea>\r\n                <button onClick={handleComment}>댓글 작성</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n\r\n"],"names":["navigate","useNavigate","idx","useParams","board","setBoard","useState","comments","setComments","newComment","setNewComment","useEffect","axios","get","concat","then","response","data","catch","error","console","_jsxs","children","_jsx","title","reg_name","hit","w_date","u_date","content","Link","to","onClick","async","delete","log","map","comment","id","value","onChange","e","target","placeholder","post","boardIdx","prevComments"],"sourceRoot":""}