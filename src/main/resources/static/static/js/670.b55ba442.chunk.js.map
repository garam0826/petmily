{"version":3,"file":"static/js/670.b55ba442.chunk.js","mappings":"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","sources":["Menu.jsx","board/ReadContent.js"],"sourcesContent":["import React from 'react';\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport store from \"./member/Store\";\r\nimport {logout} from \"./member/Reducer\";\r\nimport menustyle from \"./css/menu.css\"\r\nfunction Memu() {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const state = store.getState();\r\n    const handleLogout = () => {\r\n        dispatch(logout());\r\n        navigate(\"/main\");\r\n    };\r\n    return(\r\n        <div className=\"menubar\">\r\n            {state.isLoggedIn ? (\r\n                <button className=\"login\" onClick={handleLogout}>로그아웃</button>\r\n            ) : (\r\n                <button className=\"login\" onClick={() => navigate(\"/member/login\")}>로그인</button>\r\n            )}\r\n\r\n            <ul>\r\n                <li onClick={() => navigate(\"/main\")}>홈</li>\r\n                <li onClick={() => navigate(\"/animal\")}>보호 중인 동물</li>\r\n                <li onClick={() => navigate(\"/recommend\")}>반려견 추천</li>\r\n                <li onClick={() => navigate(\"/board/list\")}>게시판</li>\r\n                <li className=\"dropdown\">\r\n                    <span>회원 정보</span>\r\n                    <div className=\"dropdown-content\">\r\n                        <Link to=\"/member/mypage\">정보 확인 및 수정</Link>\r\n                        <Link to=\"/member/mypage/mycart\">찜 목록</Link>\r\n                        <Link to=\"/member/mypage/mycontent\">내가 작성한 글과 댓글</Link>\r\n                        <Link to=\"/member/mypage/imgUpload\">이미지 업로드</Link>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Memu;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport './readBoard.css';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null);\r\n    const [editCommentCont, setEditCommentCont] = useState('');\r\n    const [replyContents, setReplyContents] = useState({}); // 각 댓글별 대댓글 내용 관리\r\n    const [replyVisible, setReplyVisible] = useState({}); // 각 댓글별 대댓글 입력창 상태 관리\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n\r\n    const formDate = (dateString) => {\r\n        if (!dateString) return '';\r\n        const [datePart] = dateString.split('T');\r\n        return datePart;\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    // 새로운 댓글 작성\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: 0,\r\n            board_idx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1,\r\n            w_date: new Date().toISOString(),\r\n            u_date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            const newCommentData = { ...cmtData, reply_idx: response.data.reply_idx };\r\n            setComments(prevComments => [...prevComments, newCommentData]);\r\n            setNewComment('');\r\n        } catch (error) {\r\n            console.error('댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    // 대댓글 작성\r\n    const handleReply = async (parentId, replyContent) => {\r\n        const parentCmt = comments.find(comment => comment.reply_idx === parentId);\r\n        const cmtData = {\r\n            reply_idx: parentId,\r\n            board_idx: idx,\r\n            content: replyContent,\r\n            reg_name: reg_name,\r\n            step: parentCmt.step + 1,\r\n            depth: parentCmt.depth + 1,\r\n            w_date: new Date().toISOString(),\r\n            u_date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            const newReplyData = { ...cmtData, reply_idx: response.data.reply_idx };\r\n            setComments(prevComments => {\r\n                const parentIdx = prevComments.findIndex(comment => comment.reply_idx === parentId);\r\n                const updatedComments = [...prevComments];\r\n                let insertIdx = parentIdx + 1;\r\n\r\n                // Insert the reply right after the parent\r\n                while (insertIdx < updatedComments.length && updatedComments[insertIdx].depth > parentCmt.depth) {\r\n                    insertIdx++;\r\n                }\r\n\r\n                updatedComments.splice(insertIdx, 0, newReplyData); // Insert reply\r\n                return updatedComments;\r\n            });\r\n            setReplyVisible(prev => ({ ...prev, [parentId]: false })); // Hide reply input\r\n            setReplyContents(prev => ({ ...prev, [parentId]: '' })); // Clear reply content\r\n        } catch (error) {\r\n            console.error('대댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    // 댓글 수정\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put(`/board/UpdateReply`, {\r\n                ...comment,\r\n                content: editCommentCont,\r\n                u_date: new Date().toISOString(),\r\n            });\r\n            setComments(prevComments => prevComments.map(c =>\r\n                c.reply_idx === comment.reply_idx ? { ...c, content: editCommentCont, u_date: new Date().toISOString() } : c\r\n            ));\r\n            setEditCommentId(null);\r\n            setEditCommentCont('');\r\n        } catch (error) {\r\n            console.error('댓글 수정 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    // 댓글 삭제\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.reply_idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await axios.delete(`/board/DeleteReply?idx=${reply_idx}`);\r\n            setComments(prevComments =>\r\n                prevComments.filter(c =>\r\n                    !(c.reply_idx === reply_idx || c.parent_reply_idx === reply_idx) // Only delete the comment and its direct replies\r\n                )\r\n            );\r\n        } catch (error) {\r\n            console.error('댓글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await axios.delete(`/board/DeleteBoard?idx=${idx}`);\r\n            navigate('/board/list');\r\n        } catch (error) {\r\n            console.error('게시글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    // 댓글 목록을 깊이 및 단계에 따라 정렬\r\n    const sortedComments = comments.sort((a, b) => {\r\n        if (a.step === b.step) {\r\n            return a.depth - b.depth;\r\n        }\r\n        return a.step - b.step;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <div className=\"content-container\">\r\n                <div className=\"title\">{board.title}</div>\r\n                <div className=\"meta-info\">\r\n                    작성자: {board.reg_name} | 조회수: {board.hit} | 작성일: {formDate(board.w_date)} | 수정일: {formDate(board.u_date)}\r\n                </div>\r\n                <div className=\"content\">{board.content}</div>\r\n                <div className=\"content\">\r\n                    {board.reg_name === reg_name && (\r\n                        <>\r\n                            <Link to={`/board/list/edit/${idx}`}>\r\n                                <button>수정</button>\r\n                            </Link>\r\n                            <button onClick={handleDelete}>삭제</button>\r\n                        </>\r\n                    )}\r\n                    <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n                </div>\r\n                <h3>댓글</h3>\r\n                <ul className=\"comment-list\">\r\n                    {sortedComments.map(comment => (\r\n                        <li key={comment.reply_idx} className=\"comment-item\">\r\n                            {editCommentId === comment.reply_idx ? (\r\n                                <>\r\n                                    <textarea\r\n                                        value={editCommentCont}\r\n                                        onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                    ></textarea>\r\n                                    <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                    <button onClick={() => {\r\n                                        setEditCommentId(null);\r\n                                        setEditCommentCont('');\r\n                                    }}>취소</button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <div className=\"comment-content\">\r\n                                        {comment.depth > 1 && <span className=\"reply-indent\">↳ </span>}\r\n                                        {comment.content}\r\n                                    </div>\r\n                                    <div>작성자: {comment.reg_name} | 작성일: {formDate(comment.w_date)}</div>\r\n                                    {comment.reg_name === reg_name && (\r\n                                        <>\r\n                                            <button onClick={() => {\r\n                                                setEditCommentId(comment.reply_idx);\r\n                                                setEditCommentCont(comment.content);\r\n                                            }}>수정</button>\r\n                                            <button onClick={() => handleDeleteComment(comment.reply_idx)}>삭제</button>\r\n                                        </>\r\n                                    )}\r\n                                    <button\r\n                                        onClick={() => setReplyVisible(prev => ({ ...prev, [comment.reply_idx]: !prev[comment.reply_idx] }))}\r\n                                    >\r\n                                        댓글 달기\r\n                                    </button>\r\n\r\n                                    {replyVisible[comment.reply_idx] && (\r\n                                        <div className=\"reply-input\">\r\n                                            <textarea\r\n                                                value={replyContents[comment.reply_idx] || ''} // Access reply content for the specific comment\r\n                                                onChange={(e) => setReplyContents({\r\n                                                    ...replyContents,\r\n                                                    [comment.reply_idx]: e.target.value\r\n                                                })}\r\n                                                placeholder=\"댓글을 작성하세요\"\r\n                                            ></textarea>\r\n                                            <button onClick={() => handleReply(comment.reply_idx, replyContents[comment.reply_idx])}>\r\n                                                댓글 달기\r\n                                            </button>\r\n                                            <button onClick={() => {\r\n                                                setReplyVisible(prev => ({ ...prev, [comment.reply_idx]: false }));\r\n                                                setReplyContents(prev => ({ ...prev, [comment.reply_idx]: '' }));\r\n                                            }}>\r\n                                                취소\r\n                                            </button>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <div className=\"comment-input\">\r\n                    <textarea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"댓글을 작성하세요\"\r\n                    ></textarea>\r\n                    <button onClick={handleComment}>댓글 달기</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport './readBoard.css';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null);\r\n    const [editCommentCont, setEditCommentCont] = useState('');\r\n    const [replyId, setReplyId] = useState(null); // 대댓글을 달고자 하는 댓글의 ID\r\n    const [replyContent, setReplyContent] = useState(''); // 대댓글 내용\r\n    const [loading, setLoading] = useState(true); // 데이터 로딩 상태\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n\r\n    const formDate = (dateString) => {\r\n        if (!dateString) return '';\r\n        const [datePart] = dateString.split('T');\r\n        return datePart;\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List.sort((a, b) => {\r\n                    if (a.depth !== b.depth) {\r\n                        return a.depth - b.depth; // depth 기준으로 정렬\r\n                    }\r\n                    return a.reply_idx - b.reply_idx; // reply_idx 기준으로 정렬\r\n                }));\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n                setLoading(false);\r\n            });\r\n    }, [idx]);\r\n\r\n    // 새로운 댓글 작성\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: 0, // 새 댓글은 reply_idx 0으로 설정\r\n            board_idx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1,\r\n            w_date: new Date().toISOString(),\r\n            u_date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            const newCommentData = { ...cmtData, reply_idx: response.data.reply_idx };\r\n\r\n            // 새 댓글 추가 후 정렬\r\n            setComments(prevComments => {\r\n                const updatedComments = [...prevComments, newCommentData];\r\n                return updatedComments.sort((a, b) => {\r\n                    if (a.depth !== b.depth) {\r\n                        return a.depth - b.depth;\r\n                    }\r\n                    return a.reply_idx - b.reply_idx;\r\n                });\r\n            });\r\n\r\n            setNewComment('');\r\n        } catch (error) {\r\n            console.error('댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    // 대댓글 작성\r\n    const handleReply = async () => {\r\n        const parentCmt = comments.find(comment => comment.reply_idx === replyId);\r\n\r\n        if (!parentCmt) {\r\n            alert(\"댓글을 찾을 수 없습니다.\");\r\n            return;\r\n        }\r\n\r\n        const cmtData = {\r\n            reply_idx: replyId, // 부모 댓글의 reply_idx를 참조\r\n            board_idx: idx,\r\n            content: replyContent,\r\n            reg_name: reg_name,\r\n            step: parentCmt.step + 1, // 부모 댓글의 step + 1\r\n            depth: parentCmt.depth + 1, // 부모 댓글의 depth + 1\r\n            w_date: new Date().toISOString(),\r\n            u_date: new Date().toISOString(),\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            console.log('대댓글 작성 성공:', response.data);\r\n            const newReplyData = { ...cmtData, reply_idx: response.data.reply_idx };\r\n\r\n            // 부모 댓글 바로 아래에 대댓글을 추가\r\n            setComments(prevComments => {\r\n                const parentIdx = prevComments.findIndex(comment => comment.reply_idx === replyId);\r\n                const updatedComments = [...prevComments];\r\n\r\n                const insertIdx = updatedComments.slice(parentIdx + 1).findIndex(\r\n                    comment => comment.depth <= parentCmt.depth\r\n                );\r\n                const finalInsertIdx = insertIdx === -1 ? updatedComments.length : parentIdx + insertIdx + 1;\r\n\r\n                updatedComments.splice(finalInsertIdx, 0, newReplyData);\r\n                return updatedComments;\r\n            });\r\n\r\n            // 대댓글 입력 창 초기화\r\n            setReplyId(null);\r\n            setReplyContent('');\r\n        } catch (error) {\r\n            console.error('대댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    // 댓글 수정\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put(`/board/UpdateReply`, {\r\n                ...comment,\r\n                content: editCommentCont,\r\n                u_date: new Date().toISOString(),\r\n            });\r\n            console.log('댓글 수정 성공:', response.data);\r\n\r\n            setComments(prevComments => prevComments.map(c =>\r\n                c.reply_idx === comment.reply_idx ? { ...c, content: editCommentCont, u_date: new Date().toISOString() } : c\r\n            ));\r\n\r\n            setEditCommentId(null);\r\n            setEditCommentCont('');\r\n        } catch (error) {\r\n            console.error('댓글 수정 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    // 댓글 삭제\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.reply_idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.delete(`/board/DeleteReply?idx=${reply_idx}`);\r\n            console.log('댓글 삭제 성공:', response.data);\r\n\r\n            // 댓글과 해당 댓글의 대댓글만 삭제\r\n            setComments(prevComments => prevComments.filter(c =>\r\n                !(c.reply_idx === reply_idx || (c.reply_idx !== reply_idx && c.depth > comment.depth && c.step > comment.step))\r\n            ));\r\n        } catch (error) {\r\n            console.error('댓글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.delete(`/board/DeleteBoard?idx=${idx}`);\r\n            console.log('게시글 삭제 성공:', response.data);\r\n            navigate('/board/list');\r\n        } catch (error) {\r\n            console.error('게시글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            {loading ? (\r\n                <div>Loading...</div>\r\n            ) : (\r\n                <div className=\"content-container\">\r\n                    <div className=\"title\">{board.title}</div>\r\n                    <div className=\"meta-info\">\r\n                        작성자: {board.reg_name} | 조회수: {board.hit} | 작성일: {formDate(board.w_date)} | 수정일: {formDate(board.u_date)}\r\n                    </div>\r\n                    <div className=\"content\">{board.content}</div>\r\n                    <div className=\"content\">\r\n                        {board.reg_name === reg_name && (\r\n                            <>\r\n                                <Link to={`/board/list/edit/${idx}`}>\r\n                                    <button>수정</button>\r\n                                </Link>\r\n                                <button onClick={handleDelete}>삭제</button>\r\n                            </>\r\n                        )}\r\n                        <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n                    </div>\r\n                    <h3>댓글</h3>\r\n                    <ul className=\"comment-list\">\r\n                        {comments.map(comment => (\r\n                            <li key={comment.reply_idx} className=\"comment-item\">\r\n                                {editCommentId === comment.reply_idx ? (\r\n                                    <>\r\n                                        <textarea\r\n                                            value={editCommentCont}\r\n                                            onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                        ></textarea>\r\n                                        <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                        <button onClick={() => {\r\n                                            setEditCommentId(null);\r\n                                            setEditCommentCont('');\r\n                                        }}>취소</button>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <div className=\"comment-content\">\r\n                                            {comment.depth > 1 && <span className=\"reply-indent\">↳ </span>}\r\n                                            {comment.content}\r\n                                        </div>\r\n                                        <div>작성자: {comment.reg_name} | 작성일: {formDate(comment.w_date)}</div>\r\n                                        {comment.reg_name === reg_name && (\r\n                                            <>\r\n                                                <button onClick={() => {\r\n                                                    setEditCommentId(comment.reply_idx);\r\n                                                    setEditCommentCont(comment.content);\r\n                                                }}>수정\r\n                                                </button>\r\n                                                <button onClick={() => handleDeleteComment(comment.reply_idx)}>삭제\r\n                                                </button>\r\n                                            </>\r\n                                        )}\r\n                                        <button\r\n                                            onClick={() => setReplyId(replyId === comment.reply_idx ? null : comment.reply_idx)}>\r\n                                            답글\r\n                                        </button>\r\n                                        {replyId === comment.reply_idx && (\r\n                                            <div className=\"reply-input\">\r\n                                                <textarea\r\n                                                    value={replyContent}\r\n                                                    onChange={(e) => setReplyContent(e.target.value)}\r\n                                                    placeholder=\"답글을 작성하세요\"\r\n                                                ></textarea>\r\n                                                <button onClick={handleReply}>댓글 달기</button>\r\n                                                <button onClick={() => {\r\n                                                    setReplyId(null);\r\n                                                    setReplyContent('');\r\n                                                }}>취소\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                    <div className=\"comment-input\">\r\n                        <textarea\r\n                            value={newComment}\r\n                            onChange={(e) => setNewComment(e.target.value)}\r\n                            placeholder=\"댓글을 작성하세요\"\r\n                        ></textarea>\r\n                        <button onClick={handleComment}>댓글 작성</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n*/\r\n"],"names":["navigate","useNavigate","dispatch","useDispatch","state","store","getState","_jsxs","className","children","isLoggedIn","_jsx","onClick","handleLogout","logout","Link","to","idx","useParams","board","setBoard","useState","comments","setComments","newComment","setNewComment","editCommentId","setEditCommentId","editCommentCont","setEditCommentCont","replyContents","setReplyContents","replyVisible","setReplyVisible","userData","useSelector","reg_name","mem_id","formDate","dateString","datePart","split","useEffect","axios","get","concat","then","response","data","boardDTO","r_List","catch","error","console","sortedComments","sort","a","b","step","depth","Menu","title","hit","w_date","u_date","content","_Fragment","async","delete","message","alert","map","comment","reply_idx","value","onChange","e","target","put","Date","toISOString","prevComments","c","handleEditComment","find","filter","parent_reply_idx","handleDeleteComment","prev","placeholder","parentId","replyContent","parentCmt","cmtData","board_idx","post","newReplyData","parentIdx","findIndex","updatedComments","insertIdx","length","splice","handleReply","newCommentData"],"sourceRoot":""}