{"version":3,"file":"static/js/670.ed5676f6.chunk.js","mappings":"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","sources":["board/ReadContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport './readBoard.css';\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const {reply_idx} = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null); //수정 중인 댓글의 id를 저장\r\n    const [editCommentCont, setEditCommentCont] = useState(''); //수정할 댓글의 내용을 저장\r\n    const [replyId, setReplyId] = useState(null); //대댓글 작성 대상 댓글의 id를 저장\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n    const currentTime = new Date().toISOString();\r\n\r\n    useEffect(() => {\r\n        // 게시글 조회 API 호출\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List);\r\n                //setBoard(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: reply_idx,\r\n            boardIdx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1,\r\n            w_date: currentTime,\r\n            u_date: currentTime,\r\n        };\r\n\r\n        if (replyId != null) {\r\n            //대댓글 작성\r\n            const parentCmt = comments.find(comment => comment.idx === replyId);\r\n            cmtData.step = parentCmt.step + 1;\r\n            cmtData.depth = parentCmt.depth + 1;\r\n            cmtData.reply_idx = replyId;\r\n        }\r\n        await axios.post(`/board/WriteReply`, cmtData)\r\n            .then(response => {\r\n                console.log('댓글 작성 성공:', response.data);\r\n                setComments([...comments, response.data]);\r\n                /*setComments(prevComments => [...prevComments, response.data]);*/\r\n                setNewComment('');\r\n                setReplyId(null);\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 작성 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.put(`/board/UpdateReply`, {\r\n            ...comment,\r\n            content: editCommentCont,\r\n            u_date: currentTime,\r\n        })\r\n            .then(response => {\r\n                console.log('댓글 수정 성공:', response.data);\r\n                setComments(prevComments => prevComments.map(c => c.idx === comment.idx ? { ...c, content: editCommentCont, u_date: currentTime } : c));\r\n                setEditCommentId(null);\r\n                setEditCommentCont('');\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 수정 실패:', error);\r\n            });\r\n    };\r\n\r\n    // 댓글 삭제 함수\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.delete(`/board/DeleteReply?idx=${reply_idx}`)\r\n            .then(response => {\r\n                console.log('댓글 삭제 성공:', response.data);\r\n                setComments(prevComments => prevComments.filter(comment => comment.idx !== reply_idx));\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.delete(`/board/DeleteBoard?idx=${idx}`)\r\n            .then(response => {\r\n                console.log('게시글 삭제 성공:', response.data);\r\n                navigate('/board/list');\r\n            })\r\n            .catch(error => {\r\n                console.error('게시글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-container\">\r\n            <div className=\"title\">{board.title}</div>\r\n            <div className=\"meta-info\">\r\n                작성자: {board.reg_name} | 조회수: {board.hit} | 작성 시간: {board.w_date} | 수정 시간: {board.u_date}\r\n            </div>\r\n            <div className=\"content\">{board.content}</div>\r\n            <div className=\"content\">\r\n                {board.reg_name === reg_name && (\r\n                    <>\r\n                        <Link to={`/board/list/edit/${idx}`}>\r\n                            <button>수정</button>\r\n                        </Link>\r\n                        <button onClick={handleDelete}>삭제</button>\r\n                    </>\r\n                )}\r\n                <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n            </div>\r\n            <h3>댓글</h3>\r\n            <ul className=\"comment-list\">\r\n                {comments.map(comment => (\r\n                    <li key={comment.idx} className=\"comment-item\">\r\n                        {/*<div className=\"comment-content\">{comment.content}</div>\r\n                            <div className=\"comment-info\">\r\n                                작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                            </div>*/}\r\n                        {editCommentId === comment.idx ? (\r\n                            <>\r\n                                    <textarea\r\n                                        value={editCommentCont}\r\n                                        onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                    ></textarea>\r\n                                <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                <button onClick={() => {\r\n                                    setEditCommentId(null);\r\n                                    setEditCommentCont('');\r\n                                }}>취소\r\n                                </button>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <div className=\"comment-content\">{comment.content}</div>\r\n                                <div className=\"comment-info\">\r\n                                    작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                                </div>\r\n                                {comment.reg_name === reg_name && (\r\n                                    <>\r\n                                        <button onClick={() => {\r\n                                            //setEditCommentId(comment.reply_idx);\r\n                                            setEditCommentId(comment.idx);\r\n                                            setEditCommentCont(comment.content);\r\n                                        }}>수정\r\n                                        </button>\r\n                                        <button onClick={() => handleDeleteComment(comment.idx)}>삭제</button>\r\n                                    </>\r\n                                )}\r\n                                <button onClick={() => setReplyId(comment.idx)}>댓글 달기</button>\r\n                            </>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className=\"comment-input\">\r\n                    <textarea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder={\"댓글을 작성하세요\"}\r\n                    ></textarea>\r\n                {/*<input type=\"hidden\" name={reply_idx}></input>*/}\r\n                <input type=\"hidden\" name={replyId}></input>\r\n                <button onClick={handleComment}>댓글 작성</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n\r\n"],"names":["navigate","useNavigate","idx","useParams","reply_idx","board","setBoard","useState","comments","setComments","newComment","setNewComment","editCommentId","setEditCommentId","editCommentCont","setEditCommentCont","replyId","setReplyId","userData","useSelector","state","reg_name","mem_id","currentTime","Date","toISOString","useEffect","axios","get","concat","then","response","data","boardDTO","r_List","catch","error","console","_jsxs","className","children","_jsx","title","hit","w_date","u_date","content","_Fragment","Link","to","onClick","async","delete","log","alert","map","comment","value","onChange","e","target","put","prevComments","c","handleEditComment","find","filter","handleDeleteComment","placeholder","type","name","cmtData","boardIdx","step","depth","parentCmt","post"],"sourceRoot":""}