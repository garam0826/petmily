{"version":3,"file":"static/js/721.2933c05d.chunk.js","mappings":"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","sources":["Menu.jsx","member/Favorite.jsx","recommend/Recommend_Result.jsx","webpack://frontend/./src/css/recommend.css?6bff"],"sourcesContent":["import React from 'react';\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport store from \"./member/Store\";\r\nimport {logout} from \"./member/Reducer\";\r\nimport menustyle from \"./css/menu.css\"\r\nfunction Memu() {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const state = store.getState();\r\n    const handleLogout = () => {\r\n        dispatch(logout());\r\n        navigate(\"/main\");\r\n    };\r\n    return(\r\n        <div className=\"menubar\">\r\n            {state.isLoggedIn ? (\r\n                <button className=\"login\" onClick={handleLogout}>로그아웃</button>\r\n            ) : (\r\n                <button className=\"login\" onClick={() => navigate(\"/member/login\")}>로그인</button>\r\n            )}\r\n\r\n            <ul>\r\n                <li onClick={() => navigate(\"/main\")}>홈</li>\r\n                <li onClick={() => navigate(\"/animal\")}>보호 중인 동물</li>\r\n                <li onClick={() => navigate(\"/recommend\")}>반려견 추천</li>\r\n                <li onClick={() => navigate(\"/board/list\")}>게시판</li>\r\n                <li onClick={() => navigate(\"/\")}>유기견 입양 과정</li>\r\n                <li className=\"dropdown\">\r\n                    <span>회원 정보</span>\r\n                    <div className=\"dropdown-content\">\r\n                        <Link to=\"/member/mypage\">정보 확인 및 수정</Link>\r\n                        <Link to=\"/member/mypage/mycart\">찜 목록</Link>\r\n                        <Link to=\"/member/mypage\">내가 작성한 글과 댓글</Link>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Memu;","/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction Favorite() {\r\n    const userData = useSelector(state => state.userData); // 사용자 데이터를 스토어에서 가져옴.\r\n    const userId = userData.mem_id;\r\n    const [favorites, setFavorites] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            getFavorites(userId); // 사용자 아이디가 있을 때에만 찜 목록을 가져옴.\r\n        }\r\n    }, [userId]);\r\n\r\n    // 찜 목록 불러오기\r\n    const getFavorites = (userId) => {\r\n        axios.get(`/favorites/list?memId=${userId}`)\r\n            .then(response => {\r\n                setFavorites(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching favorites: \", error);\r\n            });\r\n    };\r\n\r\n    // 찜 제거 함수\r\n    const removeFavorite = (desertionNo) => {\r\n        axios.delete(`/favorites/remove?memId=${userId}&desertionNo=${desertionNo}`)\r\n            .then(response => {\r\n                console.log(\"Favorite removed successfully\");\r\n                // 찜 제거 후 찜 목록 다시 불러오기\r\n                getFavorites(userId);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error removing favorite: \", error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <h2>찜 목록</h2>\r\n            <ul>\r\n                {favorites.map(favorite => (\r\n                    <li key={favorite.id}>\r\n                        <span>{favorite.desertionNo}</span>\r\n                        <button onClick={() => removeFavorite(favorite.desertionNo)}>찜 제거</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorite;\r\n*/\r\n/*import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction Favorite() {\r\n    const userData = useSelector(state => state.userData); // 사용자 데이터를 스토어에서 가져옴.\r\n    const userId = userData ? userData.mem_id : '';\r\n    const [favorites, setFavorites] = useState([]);\r\n    const [members, setMembers] = useState([]);\r\n    const [selectedDesertionNo, setSelectedDesertionNo] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            getFavorites(userId); // 사용자 아이디가 있을 때에만 찜 목록을 가져옴.\r\n        }\r\n    }, [userId]);\r\n\r\n    // 찜 목록 불러오기\r\n    const getFavorites = (userId) => {\r\n        axios.get(`/favorites/list?memId=${userId}`)\r\n            .then(response => {\r\n                setFavorites(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching favorites: \", error);\r\n            });\r\n    };\r\n\r\n    // 특정 유기번호에 대한 사용자 목록 불러오기\r\n    const getMembersByDesertionNo = (desertionNo) => {\r\n        axios.get(`/favorites/members/${desertionNo}`)\r\n            .then(response => {\r\n                setMembers(response.data);\r\n                setSelectedDesertionNo(desertionNo);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching members: \", error);\r\n            });\r\n    };\r\n\r\n    // 찜 제거 함수\r\n    const removeFavorite = (desertionNo) => {\r\n        axios.delete(`/favorites/remove?memId=${userId}&desertionNo=${desertionNo}`)\r\n            .then(response => {\r\n                console.log(\"Favorite removed successfully\");\r\n                // 찜 제거 후 찜 목록 다시 불러오기\r\n                getFavorites(userId);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error removing favorite: \", error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <h2>찜 목록</h2>\r\n            <ul>\r\n                {favorites.map(favorite => (\r\n                    <li key={favorite.id}>\r\n                        <span>{favorite.desertionNo}</span>\r\n                        <button onClick={() => removeFavorite(favorite.desertionNo)}>찜 제거</button>\r\n                        <button onClick={() => getMembersByDesertionNo(favorite.desertionNo)}>찜한 사용자 보기</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedDesertionNo && (\r\n                <div>\r\n                    <h3>{selectedDesertionNo}을(를) 찜한 사용자 목록</h3>\r\n                    <ul>\r\n                        {members.map(member => (\r\n                            <li key={member}>{member}</li>\r\n                        ))}1\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorite;\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Menu from \"../Menu\";\r\n\r\nimport '../css/menu.css';\r\nimport '../css/result.css';\r\nimport Recommend_Result from \"../recommend/Recommend_Result\";\r\n\r\nfunction Favorite() {\r\n    const userData = useSelector(state => state.userData); // 사용자 데이터를 스토어에서 가져옴.\r\n    const userId = userData ? userData.mem_id : '';\r\n    const [favorites, setFavorites] = useState([]);\r\n    const [members, setMembers] = useState([]);\r\n    const [selectedDesertionNo, setSelectedDesertionNo] = useState('');\r\n    const [selectedUserFavorites, setSelectedUserFavorites] = useState([]);\r\n    const [selectedUserId, setSelectedUserId] = useState('');\r\n    const [userFavorites, setUserFavorites] = useState({});\r\n\r\n    /*const state = store.getState();\r\n    const userId = state.isLoggedIn ? state.userData.mem_id : null;*/\r\n\r\n    const [matches, setMatches] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            getFavorites(userId); // 사용자 아이디가 있을 때에만 찜 목록을 가져옴.\r\n        }\r\n    }, [userId]);\r\n\r\n    useEffect(() => {\r\n        const fetchMatches = async () => {\r\n            try {\r\n                const response = await axios.get(`/favorites/list?memId=${userId}`);\r\n                setMatches(response.data);\r\n            } catch (err) {\r\n                setError('Failed to fetch matches');\r\n                console.error(err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        if (userId) {\r\n            fetchMatches();\r\n        }\r\n    }, [userId]);\r\n\r\n    // 찜 목록 불러오기\r\n    const getFavorites = (userId) => {\r\n        axios.get(`/favorites/list?memId=${userId}`)\r\n            .then(response => {\r\n                setFavorites(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching favorites: \", error);\r\n            });\r\n    };\r\n\r\n    // 특정 유기번호에 대한 사용자 목록 불러오기\r\n    const getMembersByDesertionNo = (desertionNo) => {\r\n        axios.get(`/favorites/members/${desertionNo}`)\r\n            .then(response => {\r\n                setMembers(response.data);\r\n                setSelectedDesertionNo(desertionNo);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching members: \", error);\r\n            });\r\n    };\r\n\r\n    // 특정 사용자의 찜 목록 불러오기\r\n    const getUserFavorites = (memId) => {\r\n        axios.get(`/favorites/list?memId=${memId}`)\r\n            .then(response => {\r\n                setUserFavorites(prevState => ({\r\n                    ...prevState,\r\n                    [memId]: response.data\r\n                }));\r\n                /*setSelectedUserFavorites(response.data);\r\n                setSelectedUserId(memId);*/\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching user favorites: \", error);\r\n            });\r\n    };\r\n\r\n    // 찜 제거 함수\r\n    const removeFavorite = (desertionNo) => {\r\n        axios.delete(`/favorites/remove?memId=${userId}&desertionNo=${desertionNo}`)\r\n            .then(response => {\r\n                console.log(\"Favorite removed successfully\");\r\n                // 찜 제거 후 찜 목록 다시 불러오기\r\n                getFavorites(userId);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error removing favorite: \", error);\r\n            });\r\n    };\r\n\r\n    /*return (\r\n        <div>\r\n            <Menu />\r\n            <h2>찜 목록</h2>\r\n            <ul>\r\n                {favorites.map(favorite => (\r\n                    <li key={favorite.id}>\r\n                        <span>{favorite.desertionNo}</span>\r\n                        <button onClick={() => removeFavorite(favorite.desertionNo)}>찜 제거</button>\r\n                        <button onClick={() => getMembersByDesertionNo(favorite.desertionNo)}>찜한 사용자 보기</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedDesertionNo && (\r\n                <div>\r\n                    <h3>{selectedDesertionNo}을(를) 찜한 사용자 목록</h3>\r\n                    <ul>\r\n                        {members.map(member => (\r\n                            <li key={member}>\r\n                                <span>{member}</span>\r\n                                <button onClick={() => getUserFavorites(member)}>이 사용자의 찜 목록 보기</button>\r\n                            </li>\r\n                        ))}\r\n                        {selectedUserId && (\r\n                            <div>\r\n                                <h3>{selectedUserId}의 찜 목록</h3>\r\n                                <ul>\r\n                                    {selectedUserFavorites.map(favorite => (\r\n                                        <li key={favorite.id}>{favorite.desertionNo}</li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n     */\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <h2>찜 목록</h2>\r\n            <ul>\r\n                {favorites.map(favorite => (\r\n                    <li key={favorite.id}>\r\n                        <Recommend_Result matches={matches} loading={loading} error={error}/>\r\n                        <span>{favorite.desertionNo}</span>\r\n                        <button onClick={() => removeFavorite(favorite.desertionNo)}>찜 제거</button>\r\n                        <button onClick={() => getMembersByDesertionNo(favorite.desertionNo)}>찜한 사용자 보기</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedDesertionNo && (\r\n                <div>\r\n                    <h3>{selectedDesertionNo}을(를) 찜한 사용자 목록</h3>\r\n                    <ul>\r\n                        {members.map(member => (\r\n                            <li key={member}>\r\n                                <div>\r\n                                    <span>{member}</span>\r\n                                    <button onClick={() => getUserFavorites(member)}>\r\n                                        이 사용자의 찜 목록 보기\r\n                                    </button>\r\n                                </div>\r\n                                {userFavorites[member] && (\r\n                                    <ul>\r\n                                        {userFavorites[member].map(fav => (\r\n                                            <li key={fav.id}><Recommend_Result matches={matches} loading={loading} error={error}/>{/*{fav.desertionNo}*/}</li>\r\n                                        ))}\r\n                                    </ul>\r\n                                )}\r\n                                {userFavorites[member] && userFavorites[member].length === 0 && (\r\n                                    <div>찜 목록이 없습니다.</div>\r\n                                )}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorite;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport store from \"../member/Store\";\r\nimport Menu from \"../Menu\";\r\nimport \"../css/recommend.css\"\r\n\r\nimport '../css/menu.css';\r\nimport '../css/result.css';\r\n\r\nconst Recommend_Result = ({ matches, loading, error }) => {\r\n    const state = store.getState();\r\n    const userId = state.isLoggedIn ? state.userData.mem_id : null;\r\n\r\n    //const [matches, setMatches] = useState([]);\r\n    //const [loading, setLoading] = useState(true);\r\n    //const [error, setError] = useState(null);\r\n\r\n    const [animalInfos, setAnimalInfos] = useState({});\r\n    const [analysisResults, setAnalysisResults] = useState({});\r\n    const [fetchDataError, setFetchDataError] = useState(null);\r\n\r\n    // 매치된 반려동물 정보를 가져오는 useEffect\r\n    useEffect(() => {\r\n        const fetchData = async (desertionNo) => {\r\n            try {\r\n                const response = await axios.get(`/api/animal/${desertionNo}`);\r\n                setAnimalInfos(prevState => ({\r\n                    ...prevState,\r\n                    [desertionNo]: response.data\r\n                }));\r\n                await handleAnalysis(desertionNo, response.data.popfile);\r\n            } catch (error) {\r\n                console.error('Error fetching animal info:', error);\r\n                setFetchDataError('Error fetching animal info');\r\n            }\r\n        };\r\n\r\n        matches.forEach(match => {\r\n            if (!animalInfos[match.desertionNo]) {\r\n                fetchData(match.desertionNo);\r\n            }\r\n        });\r\n    }, [matches]);\r\n\r\n    const handleAnalysis = async (desertionNo, imageUrl) => {\r\n        try {\r\n            const response = await axios.get(`/api/animal/analyze?desertionNo=${desertionNo}&popfile=${imageUrl}`);\r\n            setAnalysisResults(prevState => ({\r\n                ...prevState,\r\n                [desertionNo]: response.data\r\n            }));\r\n        } catch (error) {\r\n            console.error('Error analyzing image:', error);\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    if (fetchDataError) {\r\n        return <div>{fetchDataError}</div>;\r\n    }\r\n\r\n    const formatDate = (dateStr) => {\r\n        if (!dateStr) return '날짜 정보 없음'; // dateStr이 정의되지 않은 경우 대체 문자열 반환\r\n        const year = dateStr.substring(0, 4);\r\n        const month = dateStr.substring(4, 6);\r\n        const day = dateStr.substring(6, 8);\r\n        return `${year}년 ${parseInt(month, 10)}월 ${parseInt(day, 10)}일`;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <main className=\"container\">\r\n                <div data-case=\"text79\" className=\"userEL15637124\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\" data-matrix-loop=\"true\" data-matrix-column=\"1\">\r\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 item\">\r\n                                <div className=\"cl_caption\" data-edit=\"true\" data-selector=\".cl_caption\">\r\n                                    <hr className=\"fr-hr\"\r\n                                        style={{borderBottom: '2px solid #d6d7d8', width: '35px', margin: '0 auto'}}\r\n                                        align=\"center\"/>\r\n                                    <div><span className=\"fsize13\"><span\r\n                                        style={{color: 'rgb(138, 139, 142)', fontFamily: \"'Nanum Barun Gothic'\"}}><br/></span></span>\r\n                                    </div>\r\n                                    <div><span\r\n                                        style={{fontFamily: \"'Seoul Namsan'\", fontSize: '30px'}}>유기견 추천 결과</span>\r\n                                    </div>\r\n                                    <div><span className=\"fsize13\"><span style={{\r\n                                        color: 'rgb(138, 139, 142)',\r\n                                        fontFamily: \"'Nanum Barun Gothic'\"\r\n                                    }}>​</span></span></div>\r\n                                    <div><span className=\"fsize13\"><span\r\n                                        style={{color: 'rgb(138, 139, 142)', fontFamily: \"'Nanum Barun Gothic'\"}}>사용자의 취향에 맞는 유기견 5마리입니다.</span></span>\r\n                                    </div>\r\n                                    <div><span className=\"fsize13\"><span\r\n                                        style={{color: 'rgb(138, 139, 142)', fontFamily: \"'Nanum Barun Gothic'\"}}>(사진 위에 마우스를 올리면, 더 자세한 정보를 보실 수 있습니다.)<br/><br/></span></span>\r\n                                    </div>\r\n                                    <hr className=\"fr-hr\"\r\n                                        style={{borderBottom: '2px solid #d6d7d8', width: '35px', margin: '0 auto'}}\r\n                                        align=\"center\"/>\r\n                                    <div><br/></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {matches.length === 0 ? (\r\n                    <div>No matches found</div>\r\n                ) : (\r\n                    <div className=\"grid-container\">\r\n                        {matches.map((match, index) => (\r\n                            <div className=\"card\" key={match.desertionNo}>\r\n                                {animalInfos[match.desertionNo] && (\r\n                                    <div>\r\n                                        <img src={animalInfos[match.desertionNo].popfile} alt=\"Animal\"/>\r\n                                        {analysisResults[match.desertionNo] && (\r\n                                            <div>\r\n                                                <hr/>\r\n                                                <p>[ 품종 비율 1순위 ]<br/>{analysisResults[match.desertionNo].className1}<br/>({analysisResults[match.desertionNo].probability1}%)</p>\r\n                                                <p>[ 품종 비율 2순위 ]<br/>{analysisResults[match.desertionNo].className2}<br/>({analysisResults[match.desertionNo].probability2}%)</p>\r\n                                                <p>[ 품종 비율 3순위 ]<br/>{analysisResults[match.desertionNo].className3}<br/>({analysisResults[match.desertionNo].probability3}%)</p>\r\n                                            </div>\r\n                                        )}\r\n                                        <div className=\"analysis-results\">\r\n                                            <br/>\r\n                                            {/* 확인용 <p>유기 번호: {animalInfos[match.desertionNo].desertionNo}</p>*/}\r\n                                            <p>나이: {animalInfos[match.desertionNo].age}</p>\r\n                                            <p>무게: {animalInfos[match.desertionNo].weight}</p>\r\n                                            <p>공고 시작 날짜: {formatDate(animalInfos[match.desertionNo].noticeSdt)}</p>\r\n                                            <p>공고 종료 날짜: {formatDate(animalInfos[match.desertionNo].noticeEdt)}</p>\r\n                                            <p>성별: {animalInfos[match.desertionNo].sexCd}</p>\r\n                                            <p>중성화 여부: {animalInfos[match.desertionNo].neuterYn}</p>\r\n                                            <p>특징: {animalInfos[match.desertionNo].specialMark}</p>\r\n                                            <p>보호소 이름: {animalInfos[match.desertionNo].careNm}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recommend_Result;\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["navigate","useNavigate","dispatch","useDispatch","state","store","getState","_jsxs","className","children","isLoggedIn","_jsx","onClick","handleLogout","logout","Link","to","userData","useSelector","userId","mem_id","favorites","setFavorites","useState","members","setMembers","selectedDesertionNo","setSelectedDesertionNo","selectedUserFavorites","setSelectedUserFavorites","selectedUserId","setSelectedUserId","userFavorites","setUserFavorites","matches","setMatches","loading","setLoading","error","setError","useEffect","getFavorites","async","response","axios","get","concat","data","err","console","fetchMatches","then","catch","Menu","map","favorite","Recommend_Result","desertionNo","removeFavorite","delete","log","getMembersByDesertionNo","id","member","getUserFavorites","memId","prevState","fav","length","_ref","animalInfos","setAnimalInfos","analysisResults","setAnalysisResults","fetchDataError","setFetchDataError","forEach","match","handleAnalysis","popfile","fetchData","imageUrl","formatDate","dateStr","year","substring","month","day","parseInt","style","borderBottom","width","margin","align","color","fontFamily","fontSize","index","src","alt","className1","probability1","className2","probability2","className3","probability3","age","weight","noticeSdt","noticeEdt","sexCd","neuterYn","specialMark","careNm"],"sourceRoot":""}