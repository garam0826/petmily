{"version":3,"file":"static/js/559.28f60bed.chunk.js","mappings":"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","sources":["Menu.jsx","animal/Pagination.jsx","board/BoardList.js"],"sourcesContent":["import React from 'react';\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport store from \"./member/Store\";\r\nimport {logout} from \"./member/Reducer\";\r\nimport menustyle from \"./css/menu.css\"\r\nfunction Memu() {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const state = store.getState();\r\n    const handleLogout = () => {\r\n        dispatch(logout());\r\n        navigate(\"/main\");\r\n    };\r\n    return(\r\n        <div className=\"menubar\">\r\n            {state.isLoggedIn ? (\r\n                <button className=\"login\" onClick={handleLogout}>로그아웃</button>\r\n            ) : (\r\n                <button className=\"login\" onClick={() => navigate(\"/member/login\")}>로그인</button>\r\n            )}\r\n\r\n            <ul>\r\n                <li onClick={() => navigate(\"/main\")}>홈</li>\r\n                <li onClick={() => navigate(\"/animal\")}>보호 중인 동물</li>\r\n                <li onClick={() => navigate(\"/recommend\")}>반려견 추천</li>\r\n                <li onClick={() => navigate(\"/board/list\")}>게시판</li>\r\n                <li className=\"dropdown\">\r\n                    <span>회원 정보</span>\r\n                    <div className=\"dropdown-content\">\r\n                        <Link to=\"/member/mypage\">정보 확인 및 수정</Link>\r\n                        <Link to=\"/member/mypage/mycart\">찜 목록</Link>\r\n                        <Link to=\"/member/mypage/mycontent\">내가 작성한 글과 댓글</Link>\r\n                        <Link to=\"/member/mypage/imgUpload\">이미지 업로드</Link>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Memu;","import React from 'react';\r\nimport '../css/paginaion.css'; // 위에서 변환한 CSS 파일을 import 합니다.\r\n\r\nfunction Pagination({ total, limit, page, setPage }) {\r\n    const numPages = Math.ceil(total / limit);\r\n\r\n    return (\r\n        <div className=\"Nav_pagination\">\r\n            <button\r\n                className=\"Button_pagination\"\r\n                onClick={() => setPage(page - 1)}\r\n                disabled={page === 1}\r\n            >\r\n                &lt;\r\n            </button>\r\n            {Array(numPages)\r\n                .fill()\r\n                .map((_, i) => (\r\n                    <button\r\n                        className=\"Button_pagination\"\r\n                        key={i + 1}\r\n                        onClick={() => setPage(i + 1)}\r\n                        aria-current={page === i + 1 ? \"page\" : undefined}\r\n                    >\r\n                        {i + 1}\r\n                    </button>\r\n                ))}\r\n            <button\r\n                className=\"Button_pagination\"\r\n                onClick={() => setPage(page + 1)}\r\n                disabled={page === numPages}\r\n            >\r\n                &gt;\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport './board.css';\r\nimport Menu from \"../Menu\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Pagination from '../animal/Pagination';\r\n\r\nfunction BoardList() {\r\n    const [boards, setBoards] = useState([]);\r\n    const navigate = useNavigate();\r\n    const userData = useSelector(state => state.userData); // 현재 로그인한 사용자 정보\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const offset = (page - 1) * limit;\r\n\r\n    useEffect(() => {\r\n        // API 호출\r\n        axios.get('/board/List')\r\n            .then(response => {\r\n                const { b_List } = response.data;\r\n                setBoards(b_List);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board list: \", error);\r\n            });\r\n    }, []);\r\n\r\n    const handleWrite = () => {\r\n        if (userData) {\r\n            navigate(\"/board/list/write\");\r\n        } else {\r\n            alert(\"로그인이 필요합니다.\");\r\n            navigate(\"/member/login\");\r\n        }\r\n    };\r\n\r\n    const formDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        return `${year}-${month}-${day}`;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <div>\r\n                <h2 className=\"board-title\">게시판</h2>\r\n                <div className={\"board-write\"}>\r\n                    <button onClick={handleWrite}>\r\n                        글 작성하기\r\n                    </button>\r\n                </div>\r\n                <div className=\"board-cont\">\r\n                    <span className=\"board-header-no\">No.</span>\r\n                    <span className=\"board-header-title\">제목</span>\r\n                    <span className=\"board-header-author\">작성자</span>\r\n                    <span className=\"board-header-date\">작성일</span>\r\n                </div>\r\n                <ul className=\"board-list\">\r\n                    {Array.isArray(boards) && boards.slice(offset, offset + limit).map((board, idx) => (\r\n                        <li className=\"board-item\" key={board.idx}>\r\n                            <span className=\"board-index\">{idx+1}</span> {/* 시연 전용 - idx 원래: board.idx */}\r\n                            <Link to={`/board/list/read/${board.idx}`} className=\"board-link\">{board.title}</Link>\r\n                            <span className=\"board-author\">{board.reg_name}</span>\r\n                            <span className=\"board-date\">{formDate(board.w_date)}</span>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <footer>\r\n                    <Pagination\r\n                        total={boards.length}\r\n                        limit={limit}\r\n                        page={page}\r\n                        setPage={setPage}\r\n                    />\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoardList;"],"names":["navigate","useNavigate","dispatch","useDispatch","state","store","getState","_jsxs","className","children","isLoggedIn","_jsx","onClick","handleLogout","logout","Link","to","_ref","total","limit","page","setPage","numPages","Math","ceil","disabled","Array","fill","map","_","i","undefined","boards","setBoards","useState","userData","useSelector","setLimit","offset","useEffect","axios","get","then","response","b_List","data","catch","error","console","formDate","dateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","Menu","handleWrite","alert","isArray","slice","board","idx","title","reg_name","w_date","Pagination","length"],"sourceRoot":""}