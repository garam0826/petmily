{"version":3,"file":"static/js/670.f5506ece.chunk.js","mappings":"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","sources":["Menu.jsx","board/ReadContent.js"],"sourcesContent":["import React from 'react';\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport store from \"./member/Store\";\r\nimport {logout} from \"./member/Reducer\";\r\nimport menustyle from \"./css/menu.css\"\r\nfunction Memu() {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const state = store.getState();\r\n    const handleLogout = () => {\r\n        dispatch(logout());\r\n        navigate(\"/main\");\r\n    };\r\n    return(\r\n        <div className=\"menubar\">\r\n            {state.isLoggedIn ? (\r\n                <button className=\"login\" onClick={handleLogout}>로그아웃</button>\r\n            ) : (\r\n                <button className=\"login\" onClick={() => navigate(\"/member/login\")}>로그인</button>\r\n            )}\r\n\r\n            <ul>\r\n                <li onClick={() => navigate(\"/main\")}>홈</li>\r\n                <li onClick={() => navigate(\"/animal\")}>보호 중인 동물</li>\r\n                <li onClick={() => navigate(\"/recommend\")}>반려견 추천</li>\r\n                <li onClick={() => navigate(\"/board/list\")}>게시판</li>\r\n                <li onClick={() => navigate(\"/\")}>유기견 입양 과정</li>\r\n                <li className=\"dropdown\">\r\n                    <span>회원 정보</span>\r\n                    <div className=\"dropdown-content\">\r\n                        <Link to=\"/member/mypage\">정보 확인 및 수정</Link>\r\n                        <Link to=\"/member/mypage/mycart\">찜 목록</Link>\r\n                        <Link to=\"/member/mypage\">내가 작성한 글과 댓글</Link>\r\n                        <Link to=\"/member/mypage/imgUpload\">이미지 업로드</Link>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Memu;","/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport './readBoard.css';\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const {reply_idx} = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null); //수정 중인 댓글의 id를 저장\r\n    const [editCommentCont, setEditCommentCont] = useState(''); //수정할 댓글의 내용을 저장\r\n    const [replyId, setReplyId] = useState(null); //대댓글 작성 대상 댓글의 id를 저장\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n    const currentTime = new Date().toISOString();\r\n\r\n    useEffect(() => {\r\n        // 게시글 조회 API 호출\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List);\r\n                //setBoard(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: 0,\r\n            boardIdx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1,\r\n            w_date: currentTime,\r\n            u_date: currentTime,\r\n        };\r\n\r\n        if (replyId != null) {\r\n            //대댓글 작성\r\n            const parentCmt = comments.find(comment => comment.idx === replyId);\r\n            cmtData.step = parentCmt.step + 1;\r\n            cmtData.depth = parentCmt.depth + 1;\r\n            cmtData.reply_idx = replyId;\r\n        }\r\n        await axios.post(`/board/WriteReply`, cmtData)\r\n            .then(response => {\r\n                console.log('댓글 작성 성공:', response.data);\r\n                /!*setComments([...comments, response.data]);*!/\r\n                setComments(prevComments => [...prevComments, {...cmtData, reply_idx: response.data.reply_idx}]);\r\n                setNewComment('');\r\n                /!*setReplyId(null);*!/\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 작성 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.put(`/board/UpdateReply`, {\r\n            ...comment,\r\n            content: editCommentCont,\r\n            u_date: currentTime,\r\n        })\r\n            .then(response => {\r\n                console.log('댓글 수정 성공:', response.data);\r\n                setComments(prevComments => prevComments.map(c => c.reply_idx === comment.reply_idx ? { ...c, content: editCommentCont, u_date: currentTime } : c));\r\n                setEditCommentId(null);\r\n                setEditCommentCont('');\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 수정 실패:', error);\r\n            });\r\n    };\r\n\r\n    // 댓글 삭제 함수\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.reply_idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.delete(`/board/DeleteReply?idx=${reply_idx}`)\r\n            .then(response => {\r\n                console.log('댓글 삭제 성공:', response.data);\r\n                setComments(prevComments => prevComments.filter(comment => comment.reply_idx !== reply_idx));\r\n            })\r\n            .catch(error => {\r\n                console.error('댓글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n        await axios.delete(`/board/DeleteBoard?idx=${idx}`)\r\n            .then(response => {\r\n                console.log('게시글 삭제 성공:', response.data);\r\n                navigate('/board/list');\r\n            })\r\n            .catch(error => {\r\n                console.error('게시글 삭제 실패:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"content-container\">\r\n            <div className=\"title\">{board.title}</div>\r\n            <div className=\"meta-info\">\r\n                작성자: {board.reg_name} | 조회수: {board.hit} | 작성 시간: {board.w_date} | 수정 시간: {board.u_date}\r\n            </div>\r\n            <div className=\"content\">{board.content}</div>\r\n            <div className=\"content\">\r\n                {board.reg_name === reg_name && (\r\n                    <>\r\n                        <Link to={`/board/list/edit/${idx}`}>\r\n                            <button>수정</button>\r\n                        </Link>\r\n                        <button onClick={handleDelete}>삭제</button>\r\n                    </>\r\n                )}\r\n                <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n            </div>\r\n            <h3>댓글</h3>\r\n            <ul className=\"comment-list\">\r\n                {comments.map(comment => (\r\n                    <li key={comment.reply_idx} className=\"comment-item\">\r\n                        {/!*<div className=\"comment-content\">{comment.content}</div>\r\n                            <div className=\"comment-info\">\r\n                                작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                            </div>*!/}\r\n                        {editCommentId === comment.reply_idx ? (\r\n                            <>\r\n                                    <textarea\r\n                                        value={editCommentCont}\r\n                                        onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                    ></textarea>\r\n                                <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                <button onClick={() => {\r\n                                    setEditCommentId(null);\r\n                                    setEditCommentCont('');\r\n                                }}>취소\r\n                                </button>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <div className=\"comment-content\">{comment.content}</div>\r\n                                <div className=\"comment-info\">\r\n                                    작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                                </div>\r\n                                {comment.reg_name === reg_name && (\r\n                                    <>\r\n                                        <button onClick={() => {\r\n                                            setEditCommentId(comment.reply_idx);\r\n                                            {/!*setEditCommentId(comment.idx);*!/}\r\n                                            setEditCommentCont(comment.content);\r\n                                        }}>수정\r\n                                        </button>\r\n                                        <button onClick={() => handleDeleteComment(comment.reply_idx)}>삭제</button>\r\n                                    </>\r\n                                )}\r\n                                <button onClick={() => setReplyId(comment.reply_idx)}>대댓글 달기</button>\r\n                            </>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className=\"comment-input\">\r\n                    <textarea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder={\"댓글을 작성하세요\"}\r\n                    ></textarea>\r\n                {/!*<input type=\"hidden\" name={reply_idx}></input>*!/}\r\n                <input type=\"hidden\" name={replyId}></input>\r\n                <button onClick={handleComment}>댓글 작성</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport './readBoard.css';\r\nimport Menu from \"../Menu\";\r\n\r\nfunction ReadContent() {\r\n    const navigate = useNavigate();\r\n    const { idx } = useParams();\r\n    const [board, setBoard] = useState({});\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [editCommentId, setEditCommentId] = useState(null);\r\n    const [editCommentCont, setEditCommentCont] = useState('');\r\n    const [replyId, setReplyId] = useState(null); // 대댓글 달기 대상 댓글의 ID\r\n    const [replyContent, setReplyContent] = useState(''); // 대댓글 내용\r\n\r\n    const userData = useSelector(state => state.userData);\r\n    const reg_name = userData ? userData.mem_id : '';\r\n    const currentTime = new Date().toISOString();\r\n\r\n    useEffect(() => {\r\n        axios.get(`/board/Content?idx=${idx}`)\r\n            .then(response => {\r\n                const data = response.data;\r\n                setBoard(data.boardDTO);\r\n                setComments(data.r_List);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"There was an error retrieving the board: \", error);\r\n            });\r\n    }, [idx]);\r\n\r\n    const handleComment = async () => {\r\n        const cmtData = {\r\n            reply_idx: 0,\r\n            board_idx: idx,\r\n            content: newComment,\r\n            reg_name: reg_name,\r\n            step: 1,\r\n            depth: 1, // 기본 depth 값을 1로 설정\r\n            w_date: currentTime,\r\n            u_date: currentTime,\r\n        };\r\n\r\n        if (replyId != null) {\r\n            const parentCmt = comments.find(comment => comment.reply_idx === replyId);\r\n            cmtData.step = parentCmt.step + 1;\r\n            cmtData.depth = parentCmt.depth + 1;\r\n            cmtData.reply_idx = replyId;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            console.log('댓글 작성 성공:', response.data);\r\n            setComments(prevComments => [...prevComments, { ...cmtData, reply_idx: response.data.reply_idx }]);\r\n            setNewComment('');\r\n            setReplyId(null);\r\n            setReplyContent('');\r\n        } catch (error) {\r\n            console.error('댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleEditComment = async (comment) => {\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 수정할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.put(`/board/UpdateReply`, {\r\n                ...comment,\r\n                content: editCommentCont,\r\n                u_date: currentTime,\r\n            });\r\n            console.log('댓글 수정 성공:', response.data);\r\n            setComments(prevComments => prevComments.map(c => c.reply_idx === comment.reply_idx ? { ...c, content: editCommentCont, u_date: currentTime } : c));\r\n            setEditCommentId(null);\r\n            setEditCommentCont('');\r\n        } catch (error) {\r\n            console.error('댓글 수정 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleDeleteComment = async (reply_idx) => {\r\n        const comment = comments.find(c => c.reply_idx === reply_idx);\r\n        if (comment.reg_name !== reg_name) {\r\n            alert(\"본인의 댓글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.delete(`/board/DeleteReply?idx=${reply_idx}`);\r\n            console.log('댓글 삭제 성공:', response.data);\r\n            setComments(prevComments => prevComments.filter(comment => comment.reply_idx !== reply_idx));\r\n        } catch (error) {\r\n            console.error('댓글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async () => {\r\n        if (board.reg_name !== reg_name) {\r\n            alert(\"본인의 글만 삭제할 수 있습니다.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.delete(`/board/DeleteBoard?idx=${idx}`);\r\n            console.log('게시글 삭제 성공:', response.data);\r\n            navigate('/board/list');\r\n        } catch (error) {\r\n            console.error('게시글 삭제 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    const handleReplySubmit = async () => {\r\n        const cmtData = {\r\n            reply_idx: replyId,\r\n            board_idx: idx,\r\n            content: replyContent,\r\n            reg_name: reg_name,\r\n            step: comments.find(comment => comment.reply_idx === replyId).step + 1,\r\n            depth: comments.find(comment => comment.reply_idx === replyId).depth + 1,\r\n            w_date: currentTime,\r\n            u_date: currentTime,\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(`/board/WriteReply`, cmtData);\r\n            console.log('대댓글 작성 성공:', response.data);\r\n            setComments(prevComments => [...prevComments, { ...cmtData, reply_idx: response.data.reply_idx }]);\r\n            setReplyId(null);\r\n            setReplyContent('');\r\n        } catch (error) {\r\n            console.error('대댓글 작성 실패:', error.response ? error.response.data : error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Menu />\r\n            <div className=\"content-container\">\r\n                <div className=\"title\">{board.title}</div>\r\n                <div className=\"meta-info\">\r\n                    작성자: {board.reg_name} | 조회수: {board.hit} | 작성 시간: {board.w_date} | 수정 시간: {board.u_date}\r\n                </div>\r\n                <div className=\"content\">{board.content}</div>\r\n                <div className=\"content\">\r\n                    {board.reg_name === reg_name && (\r\n                        <>\r\n                            <Link to={`/board/list/edit/${idx}`}>\r\n                                <button>수정</button>\r\n                            </Link>\r\n                            <button onClick={handleDelete}>삭제</button>\r\n                        </>\r\n                    )}\r\n                    <button onClick={() => navigate(\"/board/list\")}>목록</button>\r\n                </div>\r\n                <h3>댓글</h3>\r\n                <ul className=\"comment-list\">\r\n                    {comments.map(comment => (\r\n                        <li key={comment.reply_idx} className=\"comment-item\">\r\n                            {editCommentId === comment.reply_idx ? (\r\n                                <>\r\n                                    <textarea\r\n                                        value={editCommentCont}\r\n                                        onChange={(e) => setEditCommentCont(e.target.value)}\r\n                                    ></textarea>\r\n                                    <button onClick={() => handleEditComment(comment)}>수정 완료</button>\r\n                                    <button onClick={() => {\r\n                                        setEditCommentId(null);\r\n                                        setEditCommentCont('');\r\n                                    }}>취소</button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <div className=\"comment-content\">\r\n                                        {comment.content}\r\n                                        {comment.depth > 1 && <span className=\"reply-indent\">↳</span>}\r\n                                    </div>\r\n                                    <div className=\"comment-info\">\r\n                                        작성자: {comment.reg_name} | 작성 시간: {comment.w_date}\r\n                                    </div>\r\n                                    {comment.reg_name === reg_name && (\r\n                                        <>\r\n                                            <button onClick={() => {\r\n                                                setEditCommentId(comment.reply_idx);\r\n                                                setEditCommentCont(comment.content);\r\n                                            }}>수정</button>\r\n                                            <button onClick={() => handleDeleteComment(comment.reply_idx)}>삭제</button>\r\n                                        </>\r\n                                    )}\r\n                                    <button onClick={() => setReplyId(comment.reply_idx)}>댓글 달기</button>\r\n\r\n                                    {replyId === comment.reply_idx && (\r\n                                        <div className=\"reply-input\">\r\n                                            <textarea\r\n                                                value={replyContent}\r\n                                                onChange={(e) => setReplyContent(e.target.value)}\r\n                                                placeholder=\"댓글을 작성하세요\"\r\n                                            ></textarea>\r\n                                            <button onClick={handleReplySubmit}>댓글 달기</button>\r\n                                            <button onClick={() => {\r\n                                                setReplyId(null);\r\n                                                setReplyContent('');\r\n                                            }}>취소</button>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <div className=\"comment-input\">\r\n                    <textarea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"댓글을 작성하세요\"\r\n                    ></textarea>\r\n                    <button onClick={handleComment}>댓글 작성</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadContent;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["navigate","useNavigate","dispatch","useDispatch","state","store","getState","_jsxs","className","children","isLoggedIn","_jsx","onClick","handleLogout","logout","Link","to","idx","useParams","board","setBoard","useState","comments","setComments","newComment","setNewComment","editCommentId","setEditCommentId","editCommentCont","setEditCommentCont","replyId","setReplyId","replyContent","setReplyContent","userData","useSelector","reg_name","mem_id","currentTime","Date","toISOString","useEffect","axios","get","concat","then","response","data","boardDTO","r_List","catch","error","console","handleReplySubmit","async","cmtData","reply_idx","board_idx","content","step","find","comment","depth","w_date","u_date","post","log","prevComments","message","Menu","title","hit","_Fragment","delete","alert","map","value","onChange","e","target","put","c","handleEditComment","filter","handleDeleteComment","placeholder","parentCmt"],"sourceRoot":""}